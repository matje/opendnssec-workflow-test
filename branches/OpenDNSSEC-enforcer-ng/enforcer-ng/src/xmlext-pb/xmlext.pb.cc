// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xmlext.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* xmloption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xmloption_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* xmltype_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_xmlext_2eproto() {
  protobuf_AddDesc_xmlext_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xmlext.proto");
  GOOGLE_CHECK(file != NULL);
  xmloption_descriptor_ = file->message_type(0);
  static const int xmloption_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xmloption, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xmloption, type_),
  };
  xmloption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xmloption_descriptor_,
      xmloption::default_instance_,
      xmloption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xmloption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xmloption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xmloption));
  xmltype_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xmlext_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xmloption_descriptor_, &xmloption::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xmlext_2eproto() {
  delete xmloption::default_instance_;
  delete xmloption_reflection_;
}

void protobuf_AddDesc_xmlext_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014xmlext.proto\032 google/protobuf/descript"
    "or.proto\"7\n\txmloption\022\014\n\004path\030\001 \002(\t\022\034\n\004t"
    "ype\030\002 \001(\0162\010.xmltype:\004text*!\n\007xmltype\022\010\n\004"
    "text\020\001\022\014\n\010duration\020\002:8\n\003xml\022\035.google.pro"
    "tobuf.FieldOptions\030\320\206\003 \001(\0132\n.xmloption", 198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xmlext.proto", &protobuf_RegisterTypes);
  xmloption::default_instance_ = new xmloption();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    50000, 11, false, false,
    &::xmloption::default_instance());
  xmloption::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xmlext_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xmlext_2eproto {
  StaticDescriptorInitializer_xmlext_2eproto() {
    protobuf_AddDesc_xmlext_2eproto();
  }
} static_descriptor_initializer_xmlext_2eproto_;

const ::google::protobuf::EnumDescriptor* xmltype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xmltype_descriptor_;
}
bool xmltype_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string xmloption::_default_path_;
#ifndef _MSC_VER
const int xmloption::kPathFieldNumber;
const int xmloption::kTypeFieldNumber;
#endif  // !_MSC_VER

xmloption::xmloption() {
  SharedCtor();
}

void xmloption::InitAsDefaultInstance() {
}

xmloption::xmloption(const xmloption& from) {
  SharedCtor();
  MergeFrom(from);
}

void xmloption::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&_default_path_);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xmloption::~xmloption() {
  SharedDtor();
}

void xmloption::SharedDtor() {
  if (path_ != &_default_path_) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* xmloption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xmloption_descriptor_;
}

const xmloption& xmloption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xmlext_2eproto();  return *default_instance_;
}

xmloption* xmloption::default_instance_ = NULL;

xmloption* xmloption::New() const {
  return new xmloption;
}

void xmloption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (path_ != &_default_path_) {
        path_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xmloption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_path()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->path().data(), this->path().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .xmltype type = 2 [default = text];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (xmltype_IsValid(value)) {
          set_type(static_cast< xmltype >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xmloption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    xmloption::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string path = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // optional .xmltype type = 2 [default = text];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xmloption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // optional .xmltype type = 2 [default = text];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xmloption::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional .xmltype type = 2 [default = text];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void xmloption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xmloption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xmloption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xmloption::MergeFrom(const xmloption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_path(from.path());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xmloption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xmloption::CopyFrom(const xmloption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xmloption::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void xmloption::Swap(xmloption* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xmloption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xmloption_descriptor_;
  metadata.reflection = xmloption_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::xmloption >, 11, false >
  xml(kXmlFieldNumber, ::xmloption::default_instance());
