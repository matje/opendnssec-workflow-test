// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_zonelist_2eproto__INCLUDED
#define PROTOBUF_zonelist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "xmlext.pb.h"

namespace zonelist {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zonelist_2eproto();
void protobuf_AssignDesc_zonelist_2eproto();
void protobuf_ShutdownFile_zonelist_2eproto();

class ZoneListDocument;
class ZoneList;
class ZoneData;

// ===================================================================

class ZoneListDocument : public ::google::protobuf::Message {
 public:
  ZoneListDocument();
  virtual ~ZoneListDocument();
  
  ZoneListDocument(const ZoneListDocument& from);
  
  inline ZoneListDocument& operator=(const ZoneListDocument& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneListDocument& default_instance();
  void Swap(ZoneListDocument* other);
  
  // implements Message ----------------------------------------------
  
  ZoneListDocument* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneListDocument& from);
  void MergeFrom(const ZoneListDocument& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .zonelist.pb.ZoneList zonelist = 1;
  inline bool has_zonelist() const;
  inline void clear_zonelist();
  static const int kZonelistFieldNumber = 1;
  inline const ::zonelist::pb::ZoneList& zonelist() const;
  inline ::zonelist::pb::ZoneList* mutable_zonelist();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::zonelist::pb::ZoneList* zonelist_;
  friend void  protobuf_AddDesc_zonelist_2eproto();
  friend void protobuf_AssignDesc_zonelist_2eproto();
  friend void protobuf_ShutdownFile_zonelist_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ZoneListDocument* default_instance_;
};
// -------------------------------------------------------------------

class ZoneList : public ::google::protobuf::Message {
 public:
  ZoneList();
  virtual ~ZoneList();
  
  ZoneList(const ZoneList& from);
  
  inline ZoneList& operator=(const ZoneList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneList& default_instance();
  void Swap(ZoneList* other);
  
  // implements Message ----------------------------------------------
  
  ZoneList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneList& from);
  void MergeFrom(const ZoneList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .zonelist.pb.ZoneData zones = 1;
  inline int zones_size() const;
  inline void clear_zones();
  static const int kZonesFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::zonelist::pb::ZoneData >& zones() const;
  inline ::google::protobuf::RepeatedPtrField< ::zonelist::pb::ZoneData >* mutable_zones();
  inline const ::zonelist::pb::ZoneData& zones(int index) const;
  inline ::zonelist::pb::ZoneData* mutable_zones(int index);
  inline ::zonelist::pb::ZoneData* add_zones();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::zonelist::pb::ZoneData > zones_;
  friend void  protobuf_AddDesc_zonelist_2eproto();
  friend void protobuf_AssignDesc_zonelist_2eproto();
  friend void protobuf_ShutdownFile_zonelist_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ZoneList* default_instance_;
};
// -------------------------------------------------------------------

class ZoneData : public ::google::protobuf::Message {
 public:
  ZoneData();
  virtual ~ZoneData();
  
  ZoneData(const ZoneData& from);
  
  inline ZoneData& operator=(const ZoneData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneData& default_instance();
  void Swap(ZoneData* other);
  
  // implements Message ----------------------------------------------
  
  ZoneData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneData& from);
  void MergeFrom(const ZoneData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string policy = 2 [default = "default"];
  inline bool has_policy() const;
  inline void clear_policy();
  static const int kPolicyFieldNumber = 2;
  inline const ::std::string& policy() const;
  inline void set_policy(const ::std::string& value);
  inline void set_policy(const char* value);
  inline void set_policy(const char* value, size_t size);
  inline ::std::string* mutable_policy();
  
  // optional string signerconfiguration = 3;
  inline bool has_signerconfiguration() const;
  inline void clear_signerconfiguration();
  static const int kSignerconfigurationFieldNumber = 3;
  inline const ::std::string& signerconfiguration() const;
  inline void set_signerconfiguration(const ::std::string& value);
  inline void set_signerconfiguration(const char* value);
  inline void set_signerconfiguration(const char* value, size_t size);
  inline ::std::string* mutable_signerconfiguration();
  
  // optional string inputfile = 4;
  inline bool has_inputfile() const;
  inline void clear_inputfile();
  static const int kInputfileFieldNumber = 4;
  inline const ::std::string& inputfile() const;
  inline void set_inputfile(const ::std::string& value);
  inline void set_inputfile(const char* value);
  inline void set_inputfile(const char* value, size_t size);
  inline ::std::string* mutable_inputfile();
  
  // optional string outputfile = 5;
  inline bool has_outputfile() const;
  inline void clear_outputfile();
  static const int kOutputfileFieldNumber = 5;
  inline const ::std::string& outputfile() const;
  inline void set_outputfile(const ::std::string& value);
  inline void set_outputfile(const char* value);
  inline void set_outputfile(const char* value, size_t size);
  inline ::std::string* mutable_outputfile();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* policy_;
  static const ::std::string _default_policy_;
  ::std::string* signerconfiguration_;
  static const ::std::string _default_signerconfiguration_;
  ::std::string* inputfile_;
  static const ::std::string _default_inputfile_;
  ::std::string* outputfile_;
  static const ::std::string _default_outputfile_;
  friend void  protobuf_AddDesc_zonelist_2eproto();
  friend void protobuf_AssignDesc_zonelist_2eproto();
  friend void protobuf_ShutdownFile_zonelist_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ZoneData* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// ZoneListDocument

// required .zonelist.pb.ZoneList zonelist = 1;
inline bool ZoneListDocument::has_zonelist() const {
  return _has_bit(0);
}
inline void ZoneListDocument::clear_zonelist() {
  if (zonelist_ != NULL) zonelist_->::zonelist::pb::ZoneList::Clear();
  _clear_bit(0);
}
inline const ::zonelist::pb::ZoneList& ZoneListDocument::zonelist() const {
  return zonelist_ != NULL ? *zonelist_ : *default_instance_->zonelist_;
}
inline ::zonelist::pb::ZoneList* ZoneListDocument::mutable_zonelist() {
  _set_bit(0);
  if (zonelist_ == NULL) zonelist_ = new ::zonelist::pb::ZoneList;
  return zonelist_;
}

// -------------------------------------------------------------------

// ZoneList

// repeated .zonelist.pb.ZoneData zones = 1;
inline int ZoneList::zones_size() const {
  return zones_.size();
}
inline void ZoneList::clear_zones() {
  zones_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::zonelist::pb::ZoneData >&
ZoneList::zones() const {
  return zones_;
}
inline ::google::protobuf::RepeatedPtrField< ::zonelist::pb::ZoneData >*
ZoneList::mutable_zones() {
  return &zones_;
}
inline const ::zonelist::pb::ZoneData& ZoneList::zones(int index) const {
  return zones_.Get(index);
}
inline ::zonelist::pb::ZoneData* ZoneList::mutable_zones(int index) {
  return zones_.Mutable(index);
}
inline ::zonelist::pb::ZoneData* ZoneList::add_zones() {
  return zones_.Add();
}

// -------------------------------------------------------------------

// ZoneData

// required string name = 1;
inline bool ZoneData::has_name() const {
  return _has_bit(0);
}
inline void ZoneData::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ZoneData::name() const {
  return *name_;
}
inline void ZoneData::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ZoneData::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ZoneData::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZoneData::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string policy = 2 [default = "default"];
inline bool ZoneData::has_policy() const {
  return _has_bit(1);
}
inline void ZoneData::clear_policy() {
  if (policy_ != &_default_policy_) {
    policy_->assign(_default_policy_);
  }
  _clear_bit(1);
}
inline const ::std::string& ZoneData::policy() const {
  return *policy_;
}
inline void ZoneData::set_policy(const ::std::string& value) {
  _set_bit(1);
  if (policy_ == &_default_policy_) {
    policy_ = new ::std::string;
  }
  policy_->assign(value);
}
inline void ZoneData::set_policy(const char* value) {
  _set_bit(1);
  if (policy_ == &_default_policy_) {
    policy_ = new ::std::string;
  }
  policy_->assign(value);
}
inline void ZoneData::set_policy(const char* value, size_t size) {
  _set_bit(1);
  if (policy_ == &_default_policy_) {
    policy_ = new ::std::string;
  }
  policy_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZoneData::mutable_policy() {
  _set_bit(1);
  if (policy_ == &_default_policy_) {
    policy_ = new ::std::string(_default_policy_);
  }
  return policy_;
}

// optional string signerconfiguration = 3;
inline bool ZoneData::has_signerconfiguration() const {
  return _has_bit(2);
}
inline void ZoneData::clear_signerconfiguration() {
  if (signerconfiguration_ != &_default_signerconfiguration_) {
    signerconfiguration_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ZoneData::signerconfiguration() const {
  return *signerconfiguration_;
}
inline void ZoneData::set_signerconfiguration(const ::std::string& value) {
  _set_bit(2);
  if (signerconfiguration_ == &_default_signerconfiguration_) {
    signerconfiguration_ = new ::std::string;
  }
  signerconfiguration_->assign(value);
}
inline void ZoneData::set_signerconfiguration(const char* value) {
  _set_bit(2);
  if (signerconfiguration_ == &_default_signerconfiguration_) {
    signerconfiguration_ = new ::std::string;
  }
  signerconfiguration_->assign(value);
}
inline void ZoneData::set_signerconfiguration(const char* value, size_t size) {
  _set_bit(2);
  if (signerconfiguration_ == &_default_signerconfiguration_) {
    signerconfiguration_ = new ::std::string;
  }
  signerconfiguration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZoneData::mutable_signerconfiguration() {
  _set_bit(2);
  if (signerconfiguration_ == &_default_signerconfiguration_) {
    signerconfiguration_ = new ::std::string;
  }
  return signerconfiguration_;
}

// optional string inputfile = 4;
inline bool ZoneData::has_inputfile() const {
  return _has_bit(3);
}
inline void ZoneData::clear_inputfile() {
  if (inputfile_ != &_default_inputfile_) {
    inputfile_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& ZoneData::inputfile() const {
  return *inputfile_;
}
inline void ZoneData::set_inputfile(const ::std::string& value) {
  _set_bit(3);
  if (inputfile_ == &_default_inputfile_) {
    inputfile_ = new ::std::string;
  }
  inputfile_->assign(value);
}
inline void ZoneData::set_inputfile(const char* value) {
  _set_bit(3);
  if (inputfile_ == &_default_inputfile_) {
    inputfile_ = new ::std::string;
  }
  inputfile_->assign(value);
}
inline void ZoneData::set_inputfile(const char* value, size_t size) {
  _set_bit(3);
  if (inputfile_ == &_default_inputfile_) {
    inputfile_ = new ::std::string;
  }
  inputfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZoneData::mutable_inputfile() {
  _set_bit(3);
  if (inputfile_ == &_default_inputfile_) {
    inputfile_ = new ::std::string;
  }
  return inputfile_;
}

// optional string outputfile = 5;
inline bool ZoneData::has_outputfile() const {
  return _has_bit(4);
}
inline void ZoneData::clear_outputfile() {
  if (outputfile_ != &_default_outputfile_) {
    outputfile_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& ZoneData::outputfile() const {
  return *outputfile_;
}
inline void ZoneData::set_outputfile(const ::std::string& value) {
  _set_bit(4);
  if (outputfile_ == &_default_outputfile_) {
    outputfile_ = new ::std::string;
  }
  outputfile_->assign(value);
}
inline void ZoneData::set_outputfile(const char* value) {
  _set_bit(4);
  if (outputfile_ == &_default_outputfile_) {
    outputfile_ = new ::std::string;
  }
  outputfile_->assign(value);
}
inline void ZoneData::set_outputfile(const char* value, size_t size) {
  _set_bit(4);
  if (outputfile_ == &_default_outputfile_) {
    outputfile_ = new ::std::string;
  }
  outputfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZoneData::mutable_outputfile() {
  _set_bit(4);
  if (outputfile_ == &_default_outputfile_) {
    outputfile_ = new ::std::string;
  }
  return outputfile_;
}


}  // namespace pb
}  // namespace zonelist

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_zonelist_2eproto__INCLUDED
