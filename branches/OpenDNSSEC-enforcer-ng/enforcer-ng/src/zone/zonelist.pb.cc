// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zonelist.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace ods {
namespace zonelist {

namespace {

const ::google::protobuf::Descriptor* ZoneListDocument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneListDocument_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zonelist_2eproto() {
  protobuf_AddDesc_zonelist_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zonelist.proto");
  GOOGLE_CHECK(file != NULL);
  ZoneListDocument_descriptor_ = file->message_type(0);
  static const int ZoneListDocument_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneListDocument, zonelist_),
  };
  ZoneListDocument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneListDocument_descriptor_,
      ZoneListDocument::default_instance_,
      ZoneListDocument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneListDocument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneListDocument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneListDocument));
  ZoneList_descriptor_ = file->message_type(1);
  static const int ZoneList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneList, zones_),
  };
  ZoneList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneList_descriptor_,
      ZoneList::default_instance_,
      ZoneList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneList));
  ZoneData_descriptor_ = file->message_type(2);
  static const int ZoneData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneData, policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneData, signerconfiguration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneData, inputfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneData, outputfile_),
  };
  ZoneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneData_descriptor_,
      ZoneData::default_instance_,
      ZoneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zonelist_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneListDocument_descriptor_, &ZoneListDocument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneList_descriptor_, &ZoneList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneData_descriptor_, &ZoneData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zonelist_2eproto() {
  delete ZoneListDocument::default_instance_;
  delete ZoneListDocument_reflection_;
  delete ZoneList::default_instance_;
  delete ZoneList_reflection_;
  delete ZoneData::default_instance_;
  delete ZoneData_reflection_;
}

void protobuf_AddDesc_zonelist_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_xmlext_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016zonelist.proto\022\014ods.zonelist\032\014xmlext.p"
    "roto\"L\n\020ZoneListDocument\0228\n\010zonelist\030\001 \002"
    "(\0132\026.ods.zonelist.ZoneListB\016\202\265\030\n\n\010ZoneLi"
    "st\"=\n\010ZoneList\0221\n\005zones\030\001 \003(\0132\026.ods.zone"
    "list.ZoneDataB\n\202\265\030\006\n\004Zone\"\342\001\n\010ZoneData\022\031"
    "\n\004name\030\001 \002(\tB\013\202\265\030\007\n\005@name\022%\n\006policy\030\002 \001("
    "\t:\007defaultB\014\202\265\030\010\n\006Policy\0226\n\023signerconfig"
    "uration\030\003 \001(\tB\031\202\265\030\025\n\023SignerConfiguration"
    "\022,\n\tinputfile\030\004 \001(\tB\031\202\265\030\025\n\023Adapters/Inpu"
    "t/File\022.\n\noutputfile\030\005 \001(\tB\032\202\265\030\026\n\024Adapte"
    "rs/Output/File", 414);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zonelist.proto", &protobuf_RegisterTypes);
  ZoneListDocument::default_instance_ = new ZoneListDocument();
  ZoneList::default_instance_ = new ZoneList();
  ZoneData::default_instance_ = new ZoneData();
  ZoneListDocument::default_instance_->InitAsDefaultInstance();
  ZoneList::default_instance_->InitAsDefaultInstance();
  ZoneData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zonelist_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zonelist_2eproto {
  StaticDescriptorInitializer_zonelist_2eproto() {
    protobuf_AddDesc_zonelist_2eproto();
  }
} static_descriptor_initializer_zonelist_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ZoneListDocument::kZonelistFieldNumber;
#endif  // !_MSC_VER

ZoneListDocument::ZoneListDocument() {
  SharedCtor();
}

void ZoneListDocument::InitAsDefaultInstance() {
  zonelist_ = const_cast< ::ods::zonelist::ZoneList*>(&::ods::zonelist::ZoneList::default_instance());
}

ZoneListDocument::ZoneListDocument(const ZoneListDocument& from) {
  SharedCtor();
  MergeFrom(from);
}

void ZoneListDocument::SharedCtor() {
  _cached_size_ = 0;
  zonelist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneListDocument::~ZoneListDocument() {
  SharedDtor();
}

void ZoneListDocument::SharedDtor() {
  if (this != default_instance_) {
    delete zonelist_;
  }
}

const ::google::protobuf::Descriptor* ZoneListDocument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneListDocument_descriptor_;
}

const ZoneListDocument& ZoneListDocument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zonelist_2eproto();  return *default_instance_;
}

ZoneListDocument* ZoneListDocument::default_instance_ = NULL;

ZoneListDocument* ZoneListDocument::New() const {
  return new ZoneListDocument;
}

void ZoneListDocument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (zonelist_ != NULL) zonelist_->::ods::zonelist::ZoneList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneListDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ods.zonelist.ZoneList zonelist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_zonelist()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneListDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ZoneListDocument::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .ods.zonelist.ZoneList zonelist = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->zonelist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneListDocument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ods.zonelist.ZoneList zonelist = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->zonelist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneListDocument::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ods.zonelist.ZoneList zonelist = 1;
    if (has_zonelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zonelist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ZoneListDocument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneListDocument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneListDocument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneListDocument::MergeFrom(const ZoneListDocument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_zonelist()->::ods::zonelist::ZoneList::MergeFrom(from.zonelist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneListDocument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneListDocument::CopyFrom(const ZoneListDocument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneListDocument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_zonelist()) {
    if (!this->zonelist().IsInitialized()) return false;
  }
  return true;
}

void ZoneListDocument::Swap(ZoneListDocument* other) {
  if (other != this) {
    std::swap(zonelist_, other->zonelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneListDocument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneListDocument_descriptor_;
  metadata.reflection = ZoneListDocument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneList::kZonesFieldNumber;
#endif  // !_MSC_VER

ZoneList::ZoneList() {
  SharedCtor();
}

void ZoneList::InitAsDefaultInstance() {
}

ZoneList::ZoneList(const ZoneList& from) {
  SharedCtor();
  MergeFrom(from);
}

void ZoneList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneList::~ZoneList() {
  SharedDtor();
}

void ZoneList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ZoneList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneList_descriptor_;
}

const ZoneList& ZoneList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zonelist_2eproto();  return *default_instance_;
}

ZoneList* ZoneList::default_instance_ = NULL;

ZoneList* ZoneList::New() const {
  return new ZoneList;
}

void ZoneList::Clear() {
  zones_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ods.zonelist.ZoneData zones = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_zones:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_zones()));
        if (input->ExpectTag(10)) goto parse_zones;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ZoneList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .ods.zonelist.ZoneData zones = 1;
  for (int i = 0; i < this->zones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->zones(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ods.zonelist.ZoneData zones = 1;
  for (int i = 0; i < this->zones_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->zones(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneList::ByteSize() const {
  int total_size = 0;
  
  // repeated .ods.zonelist.ZoneData zones = 1;
  total_size += 1 * this->zones_size();
  for (int i = 0; i < this->zones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zones(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ZoneList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneList::MergeFrom(const ZoneList& from) {
  GOOGLE_CHECK_NE(&from, this);
  zones_.MergeFrom(from.zones_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneList::CopyFrom(const ZoneList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneList::IsInitialized() const {
  
  for (int i = 0; i < zones_size(); i++) {
    if (!this->zones(i).IsInitialized()) return false;
  }
  return true;
}

void ZoneList::Swap(ZoneList* other) {
  if (other != this) {
    zones_.Swap(&other->zones_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneList_descriptor_;
  metadata.reflection = ZoneList_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ZoneData::_default_name_;
const ::std::string ZoneData::_default_policy_("default");
const ::std::string ZoneData::_default_signerconfiguration_;
const ::std::string ZoneData::_default_inputfile_;
const ::std::string ZoneData::_default_outputfile_;
#ifndef _MSC_VER
const int ZoneData::kNameFieldNumber;
const int ZoneData::kPolicyFieldNumber;
const int ZoneData::kSignerconfigurationFieldNumber;
const int ZoneData::kInputfileFieldNumber;
const int ZoneData::kOutputfileFieldNumber;
#endif  // !_MSC_VER

ZoneData::ZoneData() {
  SharedCtor();
}

void ZoneData::InitAsDefaultInstance() {
}

ZoneData::ZoneData(const ZoneData& from) {
  SharedCtor();
  MergeFrom(from);
}

void ZoneData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  policy_ = const_cast< ::std::string*>(&_default_policy_);
  signerconfiguration_ = const_cast< ::std::string*>(&_default_signerconfiguration_);
  inputfile_ = const_cast< ::std::string*>(&_default_inputfile_);
  outputfile_ = const_cast< ::std::string*>(&_default_outputfile_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneData::~ZoneData() {
  SharedDtor();
}

void ZoneData::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (policy_ != &_default_policy_) {
    delete policy_;
  }
  if (signerconfiguration_ != &_default_signerconfiguration_) {
    delete signerconfiguration_;
  }
  if (inputfile_ != &_default_inputfile_) {
    delete inputfile_;
  }
  if (outputfile_ != &_default_outputfile_) {
    delete outputfile_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ZoneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneData_descriptor_;
}

const ZoneData& ZoneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zonelist_2eproto();  return *default_instance_;
}

ZoneData* ZoneData::default_instance_ = NULL;

ZoneData* ZoneData::New() const {
  return new ZoneData;
}

void ZoneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (policy_ != &_default_policy_) {
        policy_->assign(_default_policy_);
      }
    }
    if (_has_bit(2)) {
      if (signerconfiguration_ != &_default_signerconfiguration_) {
        signerconfiguration_->clear();
      }
    }
    if (_has_bit(3)) {
      if (inputfile_ != &_default_inputfile_) {
        inputfile_->clear();
      }
    }
    if (_has_bit(4)) {
      if (outputfile_ != &_default_outputfile_) {
        outputfile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_policy;
        break;
      }
      
      // optional string policy = 2 [default = "default"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_policy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_policy()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->policy().data(), this->policy().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_signerconfiguration;
        break;
      }
      
      // optional string signerconfiguration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signerconfiguration:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_signerconfiguration()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->signerconfiguration().data(), this->signerconfiguration().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_inputfile;
        break;
      }
      
      // optional string inputfile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_inputfile:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_inputfile()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->inputfile().data(), this->inputfile().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_outputfile;
        break;
      }
      
      // optional string outputfile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_outputfile:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_outputfile()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->outputfile().data(), this->outputfile().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ZoneData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string policy = 2 [default = "default"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->policy(), output);
  }
  
  // optional string signerconfiguration = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signerconfiguration().data(), this->signerconfiguration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signerconfiguration(), output);
  }
  
  // optional string inputfile = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputfile().data(), this->inputfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->inputfile(), output);
  }
  
  // optional string outputfile = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outputfile().data(), this->outputfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->outputfile(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string policy = 2 [default = "default"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->policy(), target);
  }
  
  // optional string signerconfiguration = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signerconfiguration().data(), this->signerconfiguration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signerconfiguration(), target);
  }
  
  // optional string inputfile = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputfile().data(), this->inputfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->inputfile(), target);
  }
  
  // optional string outputfile = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outputfile().data(), this->outputfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->outputfile(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string policy = 2 [default = "default"];
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy());
    }
    
    // optional string signerconfiguration = 3;
    if (has_signerconfiguration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signerconfiguration());
    }
    
    // optional string inputfile = 4;
    if (has_inputfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputfile());
    }
    
    // optional string outputfile = 5;
    if (has_outputfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outputfile());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ZoneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneData::MergeFrom(const ZoneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_policy(from.policy());
    }
    if (from._has_bit(2)) {
      set_signerconfiguration(from.signerconfiguration());
    }
    if (from._has_bit(3)) {
      set_inputfile(from.inputfile());
    }
    if (from._has_bit(4)) {
      set_outputfile(from.outputfile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneData::CopyFrom(const ZoneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ZoneData::Swap(ZoneData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(policy_, other->policy_);
    std::swap(signerconfiguration_, other->signerconfiguration_);
    std::swap(inputfile_, other->inputfile_);
    std::swap(outputfile_, other->outputfile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneData_descriptor_;
  metadata.reflection = ZoneData_reflection_;
  return metadata;
}


}  // namespace zonelist
}  // namespace ods
