// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "keystate.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace ods {
namespace keystate {

namespace {

const ::google::protobuf::Descriptor* KeyStateDocument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyStateDocument_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnforcerZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnforcerZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* keyrole_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rrstate_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_keystate_2eproto() {
  protobuf_AddDesc_keystate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "keystate.proto");
  GOOGLE_CHECK(file != NULL);
  KeyStateDocument_descriptor_ = file->message_type(0);
  static const int KeyStateDocument_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyStateDocument, zones_),
  };
  KeyStateDocument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyStateDocument_descriptor_,
      KeyStateDocument::default_instance_,
      KeyStateDocument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyStateDocument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyStateDocument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyStateDocument));
  EnforcerZone_descriptor_ = file->message_type(1);
  static const int EnforcerZone_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnforcerZone, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnforcerZone, policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnforcerZone, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnforcerZone, signconf_needs_writing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnforcerZone, signconf_path_),
  };
  EnforcerZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnforcerZone_descriptor_,
      EnforcerZone::default_instance_,
      EnforcerZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnforcerZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnforcerZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnforcerZone));
  KeyData_descriptor_ = file->message_type(2);
  static const int KeyData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, locator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, inception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, ds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, rrsig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, dnskey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, ds_seen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, submit_to_parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, introducing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, revoke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, standby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, publish_),
  };
  KeyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyData_descriptor_,
      KeyData::default_instance_,
      KeyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyData));
  KeyState_descriptor_ = file->message_type(3);
  static const int KeyState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyState, last_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyState, minimize_),
  };
  KeyState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyState_descriptor_,
      KeyState::default_instance_,
      KeyState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyState));
  keyrole_descriptor_ = file->enum_type(0);
  rrstate_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_keystate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyStateDocument_descriptor_, &KeyStateDocument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnforcerZone_descriptor_, &EnforcerZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyData_descriptor_, &KeyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyState_descriptor_, &KeyState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_keystate_2eproto() {
  delete KeyStateDocument::default_instance_;
  delete KeyStateDocument_reflection_;
  delete EnforcerZone::default_instance_;
  delete EnforcerZone_reflection_;
  delete KeyData::default_instance_;
  delete KeyData_reflection_;
  delete KeyState::default_instance_;
  delete KeyState_reflection_;
}

void protobuf_AddDesc_keystate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_xmlext_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016keystate.proto\022\014ods.keystate\032\014xmlext.p"
    "roto\"=\n\020KeyStateDocument\022)\n\005zones\030\001 \003(\0132"
    "\032.ods.keystate.EnforcerZone\"\210\001\n\014Enforcer"
    "Zone\022\014\n\004name\030\001 \002(\t\022\016\n\006policy\030\002 \002(\t\022#\n\004ke"
    "ys\030\003 \003(\0132\025.ods.keystate.KeyData\022\036\n\026signc"
    "onf_needs_writing\030\004 \002(\010\022\025\n\rsignconf_path"
    "\030\005 \002(\t\"\212\003\n\007KeyData\022\017\n\007locator\030\001 \002(\t\022\021\n\ta"
    "lgorithm\030\002 \002(\r\022\021\n\tinception\030\003 \002(\r\022\"\n\002ds\030"
    "\004 \002(\0132\026.ods.keystate.KeyState\022%\n\005rrsig\030\005"
    " \002(\0132\026.ods.keystate.KeyState\022&\n\006dnskey\030\006"
    " \002(\0132\026.ods.keystate.KeyState\022#\n\004role\030\007 \002"
    "(\0162\025.ods.keystate.keyrole\022\026\n\007ds_seen\030\010 \001"
    "(\010:\005false\022\037\n\020submit_to_parent\030\t \001(\010:\005fal"
    "se\022\031\n\013introducing\030\n \001(\010:\004true\022\025\n\006revoke\030"
    "\013 \001(\010:\005false\022\026\n\007standby\030\014 \001(\010:\005false\022\025\n\006"
    "active\030\r \001(\010:\005false\022\026\n\007publish\030\016 \001(\010:\005fa"
    "lse\"f\n\010KeyState\022,\n\005state\030\001 \001(\0162\025.ods.key"
    "state.rrstate:\006hidden\022\023\n\013last_change\030\002 \001"
    "(\r\022\027\n\010minimize\030\003 \001(\010:\005false*$\n\007keyrole\022\007"
    "\n\003KSK\020\001\022\007\n\003ZSK\020\002\022\007\n\003CSK\020\003*s\n\007rrstate\022\n\n\006"
    "hidden\020\000\022\014\n\010rumoured\020\001\022\r\n\tcommitted\020\002\022\017\n"
    "\013omnipresent\020\003\022\017\n\013unretentive\020\004\022\020\n\014postc"
    "omitted\020\005\022\013\n\007revoked\020\006", 902);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "keystate.proto", &protobuf_RegisterTypes);
  KeyStateDocument::default_instance_ = new KeyStateDocument();
  EnforcerZone::default_instance_ = new EnforcerZone();
  KeyData::default_instance_ = new KeyData();
  KeyState::default_instance_ = new KeyState();
  KeyStateDocument::default_instance_->InitAsDefaultInstance();
  EnforcerZone::default_instance_->InitAsDefaultInstance();
  KeyData::default_instance_->InitAsDefaultInstance();
  KeyState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_keystate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_keystate_2eproto {
  StaticDescriptorInitializer_keystate_2eproto() {
    protobuf_AddDesc_keystate_2eproto();
  }
} static_descriptor_initializer_keystate_2eproto_;

const ::google::protobuf::EnumDescriptor* keyrole_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return keyrole_descriptor_;
}
bool keyrole_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rrstate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rrstate_descriptor_;
}
bool rrstate_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int KeyStateDocument::kZonesFieldNumber;
#endif  // !_MSC_VER

KeyStateDocument::KeyStateDocument() {
  SharedCtor();
}

void KeyStateDocument::InitAsDefaultInstance() {
}

KeyStateDocument::KeyStateDocument(const KeyStateDocument& from) {
  SharedCtor();
  MergeFrom(from);
}

void KeyStateDocument::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyStateDocument::~KeyStateDocument() {
  SharedDtor();
}

void KeyStateDocument::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* KeyStateDocument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyStateDocument_descriptor_;
}

const KeyStateDocument& KeyStateDocument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_keystate_2eproto();  return *default_instance_;
}

KeyStateDocument* KeyStateDocument::default_instance_ = NULL;

KeyStateDocument* KeyStateDocument::New() const {
  return new KeyStateDocument;
}

void KeyStateDocument::Clear() {
  zones_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyStateDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ods.keystate.EnforcerZone zones = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_zones:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_zones()));
        if (input->ExpectTag(10)) goto parse_zones;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyStateDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    KeyStateDocument::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .ods.keystate.EnforcerZone zones = 1;
  for (int i = 0; i < this->zones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->zones(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyStateDocument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ods.keystate.EnforcerZone zones = 1;
  for (int i = 0; i < this->zones_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->zones(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyStateDocument::ByteSize() const {
  int total_size = 0;
  
  // repeated .ods.keystate.EnforcerZone zones = 1;
  total_size += 1 * this->zones_size();
  for (int i = 0; i < this->zones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zones(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void KeyStateDocument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyStateDocument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyStateDocument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyStateDocument::MergeFrom(const KeyStateDocument& from) {
  GOOGLE_CHECK_NE(&from, this);
  zones_.MergeFrom(from.zones_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyStateDocument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyStateDocument::CopyFrom(const KeyStateDocument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyStateDocument::IsInitialized() const {
  
  for (int i = 0; i < zones_size(); i++) {
    if (!this->zones(i).IsInitialized()) return false;
  }
  return true;
}

void KeyStateDocument::Swap(KeyStateDocument* other) {
  if (other != this) {
    zones_.Swap(&other->zones_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyStateDocument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyStateDocument_descriptor_;
  metadata.reflection = KeyStateDocument_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string EnforcerZone::_default_name_;
const ::std::string EnforcerZone::_default_policy_;
const ::std::string EnforcerZone::_default_signconf_path_;
#ifndef _MSC_VER
const int EnforcerZone::kNameFieldNumber;
const int EnforcerZone::kPolicyFieldNumber;
const int EnforcerZone::kKeysFieldNumber;
const int EnforcerZone::kSignconfNeedsWritingFieldNumber;
const int EnforcerZone::kSignconfPathFieldNumber;
#endif  // !_MSC_VER

EnforcerZone::EnforcerZone() {
  SharedCtor();
}

void EnforcerZone::InitAsDefaultInstance() {
}

EnforcerZone::EnforcerZone(const EnforcerZone& from) {
  SharedCtor();
  MergeFrom(from);
}

void EnforcerZone::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  policy_ = const_cast< ::std::string*>(&_default_policy_);
  signconf_needs_writing_ = false;
  signconf_path_ = const_cast< ::std::string*>(&_default_signconf_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnforcerZone::~EnforcerZone() {
  SharedDtor();
}

void EnforcerZone::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (policy_ != &_default_policy_) {
    delete policy_;
  }
  if (signconf_path_ != &_default_signconf_path_) {
    delete signconf_path_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* EnforcerZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnforcerZone_descriptor_;
}

const EnforcerZone& EnforcerZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_keystate_2eproto();  return *default_instance_;
}

EnforcerZone* EnforcerZone::default_instance_ = NULL;

EnforcerZone* EnforcerZone::New() const {
  return new EnforcerZone;
}

void EnforcerZone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (policy_ != &_default_policy_) {
        policy_->clear();
      }
    }
    signconf_needs_writing_ = false;
    if (_has_bit(4)) {
      if (signconf_path_ != &_default_signconf_path_) {
        signconf_path_->clear();
      }
    }
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnforcerZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_policy;
        break;
      }
      
      // required string policy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_policy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_policy()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->policy().data(), this->policy().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }
      
      // repeated .ods.keystate.KeyData keys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_keys:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_keys()));
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectTag(32)) goto parse_signconf_needs_writing;
        break;
      }
      
      // required bool signconf_needs_writing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_signconf_needs_writing:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &signconf_needs_writing_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_signconf_path;
        break;
      }
      
      // required string signconf_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signconf_path:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_signconf_path()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->signconf_path().data(), this->signconf_path().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnforcerZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    EnforcerZone::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string policy = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->policy(), output);
  }
  
  // repeated .ods.keystate.KeyData keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->keys(i), output);
  }
  
  // required bool signconf_needs_writing = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->signconf_needs_writing(), output);
  }
  
  // required string signconf_path = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signconf_path().data(), this->signconf_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->signconf_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnforcerZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string policy = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->policy(), target);
  }
  
  // repeated .ods.keystate.KeyData keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keys(i), target);
  }
  
  // required bool signconf_needs_writing = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->signconf_needs_writing(), target);
  }
  
  // required string signconf_path = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signconf_path().data(), this->signconf_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signconf_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnforcerZone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string policy = 2;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy());
    }
    
    // required bool signconf_needs_writing = 4;
    if (has_signconf_needs_writing()) {
      total_size += 1 + 1;
    }
    
    // required string signconf_path = 5;
    if (has_signconf_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signconf_path());
    }
    
  }
  // repeated .ods.keystate.KeyData keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void EnforcerZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnforcerZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnforcerZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnforcerZone::MergeFrom(const EnforcerZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_policy(from.policy());
    }
    if (from._has_bit(3)) {
      set_signconf_needs_writing(from.signconf_needs_writing());
    }
    if (from._has_bit(4)) {
      set_signconf_path(from.signconf_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnforcerZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnforcerZone::CopyFrom(const EnforcerZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnforcerZone::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  
  for (int i = 0; i < keys_size(); i++) {
    if (!this->keys(i).IsInitialized()) return false;
  }
  return true;
}

void EnforcerZone::Swap(EnforcerZone* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(policy_, other->policy_);
    keys_.Swap(&other->keys_);
    std::swap(signconf_needs_writing_, other->signconf_needs_writing_);
    std::swap(signconf_path_, other->signconf_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnforcerZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnforcerZone_descriptor_;
  metadata.reflection = EnforcerZone_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string KeyData::_default_locator_;
#ifndef _MSC_VER
const int KeyData::kLocatorFieldNumber;
const int KeyData::kAlgorithmFieldNumber;
const int KeyData::kInceptionFieldNumber;
const int KeyData::kDsFieldNumber;
const int KeyData::kRrsigFieldNumber;
const int KeyData::kDnskeyFieldNumber;
const int KeyData::kRoleFieldNumber;
const int KeyData::kDsSeenFieldNumber;
const int KeyData::kSubmitToParentFieldNumber;
const int KeyData::kIntroducingFieldNumber;
const int KeyData::kRevokeFieldNumber;
const int KeyData::kStandbyFieldNumber;
const int KeyData::kActiveFieldNumber;
const int KeyData::kPublishFieldNumber;
#endif  // !_MSC_VER

KeyData::KeyData() {
  SharedCtor();
}

void KeyData::InitAsDefaultInstance() {
  ds_ = const_cast< ::ods::keystate::KeyState*>(&::ods::keystate::KeyState::default_instance());
  rrsig_ = const_cast< ::ods::keystate::KeyState*>(&::ods::keystate::KeyState::default_instance());
  dnskey_ = const_cast< ::ods::keystate::KeyState*>(&::ods::keystate::KeyState::default_instance());
}

KeyData::KeyData(const KeyData& from) {
  SharedCtor();
  MergeFrom(from);
}

void KeyData::SharedCtor() {
  _cached_size_ = 0;
  locator_ = const_cast< ::std::string*>(&_default_locator_);
  algorithm_ = 0u;
  inception_ = 0u;
  ds_ = NULL;
  rrsig_ = NULL;
  dnskey_ = NULL;
  role_ = 1;
  ds_seen_ = false;
  submit_to_parent_ = false;
  introducing_ = true;
  revoke_ = false;
  standby_ = false;
  active_ = false;
  publish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyData::~KeyData() {
  SharedDtor();
}

void KeyData::SharedDtor() {
  if (locator_ != &_default_locator_) {
    delete locator_;
  }
  if (this != default_instance_) {
    delete ds_;
    delete rrsig_;
    delete dnskey_;
  }
}

const ::google::protobuf::Descriptor* KeyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyData_descriptor_;
}

const KeyData& KeyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_keystate_2eproto();  return *default_instance_;
}

KeyData* KeyData::default_instance_ = NULL;

KeyData* KeyData::New() const {
  return new KeyData;
}

void KeyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (locator_ != &_default_locator_) {
        locator_->clear();
      }
    }
    algorithm_ = 0u;
    inception_ = 0u;
    if (_has_bit(3)) {
      if (ds_ != NULL) ds_->::ods::keystate::KeyState::Clear();
    }
    if (_has_bit(4)) {
      if (rrsig_ != NULL) rrsig_->::ods::keystate::KeyState::Clear();
    }
    if (_has_bit(5)) {
      if (dnskey_ != NULL) dnskey_->::ods::keystate::KeyState::Clear();
    }
    role_ = 1;
    ds_seen_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    submit_to_parent_ = false;
    introducing_ = true;
    revoke_ = false;
    standby_ = false;
    active_ = false;
    publish_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string locator = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_locator()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->locator().data(), this->locator().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_algorithm;
        break;
      }
      
      // required uint32 algorithm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_algorithm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &algorithm_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_inception;
        break;
      }
      
      // required uint32 inception = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_inception:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &inception_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_ds;
        break;
      }
      
      // required .ods.keystate.KeyState ds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ds:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_ds()));
        if (input->ExpectTag(42)) goto parse_rrsig;
        break;
      }
      
      // required .ods.keystate.KeyState rrsig = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_rrsig:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_rrsig()));
        if (input->ExpectTag(50)) goto parse_dnskey;
        break;
      }
      
      // required .ods.keystate.KeyState dnskey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dnskey:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_dnskey()));
        if (input->ExpectTag(56)) goto parse_role;
        break;
      }
      
      // required .ods.keystate.keyrole role = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (ods::keystate::keyrole_IsValid(value)) {
          set_role(static_cast< ods::keystate::keyrole >(value));
        } else {
          mutable_unknown_fields()->AddVarint(7, value);
        }
        if (input->ExpectTag(64)) goto parse_ds_seen;
        break;
      }
      
      // optional bool ds_seen = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ds_seen:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &ds_seen_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_submit_to_parent;
        break;
      }
      
      // optional bool submit_to_parent = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_submit_to_parent:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &submit_to_parent_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_introducing;
        break;
      }
      
      // optional bool introducing = 10 [default = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_introducing:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &introducing_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_revoke;
        break;
      }
      
      // optional bool revoke = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_revoke:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &revoke_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_standby;
        break;
      }
      
      // optional bool standby = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_standby:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &standby_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_active;
        break;
      }
      
      // optional bool active = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_active:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &active_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_publish;
        break;
      }
      
      // optional bool publish = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_publish:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &publish_));
        _set_bit(13);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    KeyData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string locator = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locator().data(), this->locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->locator(), output);
  }
  
  // required uint32 algorithm = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->algorithm(), output);
  }
  
  // required uint32 inception = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inception(), output);
  }
  
  // required .ods.keystate.KeyState ds = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->ds(), output);
  }
  
  // required .ods.keystate.KeyState rrsig = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->rrsig(), output);
  }
  
  // required .ods.keystate.KeyState dnskey = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->dnskey(), output);
  }
  
  // required .ods.keystate.keyrole role = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->role(), output);
  }
  
  // optional bool ds_seen = 8 [default = false];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ds_seen(), output);
  }
  
  // optional bool submit_to_parent = 9 [default = false];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->submit_to_parent(), output);
  }
  
  // optional bool introducing = 10 [default = true];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->introducing(), output);
  }
  
  // optional bool revoke = 11 [default = false];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->revoke(), output);
  }
  
  // optional bool standby = 12 [default = false];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->standby(), output);
  }
  
  // optional bool active = 13 [default = false];
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->active(), output);
  }
  
  // optional bool publish = 14 [default = false];
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->publish(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string locator = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locator().data(), this->locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->locator(), target);
  }
  
  // required uint32 algorithm = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->algorithm(), target);
  }
  
  // required uint32 inception = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inception(), target);
  }
  
  // required .ods.keystate.KeyState ds = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ds(), target);
  }
  
  // required .ods.keystate.KeyState rrsig = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rrsig(), target);
  }
  
  // required .ods.keystate.KeyState dnskey = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dnskey(), target);
  }
  
  // required .ods.keystate.keyrole role = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->role(), target);
  }
  
  // optional bool ds_seen = 8 [default = false];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ds_seen(), target);
  }
  
  // optional bool submit_to_parent = 9 [default = false];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->submit_to_parent(), target);
  }
  
  // optional bool introducing = 10 [default = true];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->introducing(), target);
  }
  
  // optional bool revoke = 11 [default = false];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->revoke(), target);
  }
  
  // optional bool standby = 12 [default = false];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->standby(), target);
  }
  
  // optional bool active = 13 [default = false];
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->active(), target);
  }
  
  // optional bool publish = 14 [default = false];
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->publish(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string locator = 1;
    if (has_locator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locator());
    }
    
    // required uint32 algorithm = 2;
    if (has_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->algorithm());
    }
    
    // required uint32 inception = 3;
    if (has_inception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inception());
    }
    
    // required .ods.keystate.KeyState ds = 4;
    if (has_ds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ds());
    }
    
    // required .ods.keystate.KeyState rrsig = 5;
    if (has_rrsig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rrsig());
    }
    
    // required .ods.keystate.KeyState dnskey = 6;
    if (has_dnskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dnskey());
    }
    
    // required .ods.keystate.keyrole role = 7;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }
    
    // optional bool ds_seen = 8 [default = false];
    if (has_ds_seen()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool submit_to_parent = 9 [default = false];
    if (has_submit_to_parent()) {
      total_size += 1 + 1;
    }
    
    // optional bool introducing = 10 [default = true];
    if (has_introducing()) {
      total_size += 1 + 1;
    }
    
    // optional bool revoke = 11 [default = false];
    if (has_revoke()) {
      total_size += 1 + 1;
    }
    
    // optional bool standby = 12 [default = false];
    if (has_standby()) {
      total_size += 1 + 1;
    }
    
    // optional bool active = 13 [default = false];
    if (has_active()) {
      total_size += 1 + 1;
    }
    
    // optional bool publish = 14 [default = false];
    if (has_publish()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void KeyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyData::MergeFrom(const KeyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_locator(from.locator());
    }
    if (from._has_bit(1)) {
      set_algorithm(from.algorithm());
    }
    if (from._has_bit(2)) {
      set_inception(from.inception());
    }
    if (from._has_bit(3)) {
      mutable_ds()->::ods::keystate::KeyState::MergeFrom(from.ds());
    }
    if (from._has_bit(4)) {
      mutable_rrsig()->::ods::keystate::KeyState::MergeFrom(from.rrsig());
    }
    if (from._has_bit(5)) {
      mutable_dnskey()->::ods::keystate::KeyState::MergeFrom(from.dnskey());
    }
    if (from._has_bit(6)) {
      set_role(from.role());
    }
    if (from._has_bit(7)) {
      set_ds_seen(from.ds_seen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_submit_to_parent(from.submit_to_parent());
    }
    if (from._has_bit(9)) {
      set_introducing(from.introducing());
    }
    if (from._has_bit(10)) {
      set_revoke(from.revoke());
    }
    if (from._has_bit(11)) {
      set_standby(from.standby());
    }
    if (from._has_bit(12)) {
      set_active(from.active());
    }
    if (from._has_bit(13)) {
      set_publish(from.publish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyData::CopyFrom(const KeyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void KeyData::Swap(KeyData* other) {
  if (other != this) {
    std::swap(locator_, other->locator_);
    std::swap(algorithm_, other->algorithm_);
    std::swap(inception_, other->inception_);
    std::swap(ds_, other->ds_);
    std::swap(rrsig_, other->rrsig_);
    std::swap(dnskey_, other->dnskey_);
    std::swap(role_, other->role_);
    std::swap(ds_seen_, other->ds_seen_);
    std::swap(submit_to_parent_, other->submit_to_parent_);
    std::swap(introducing_, other->introducing_);
    std::swap(revoke_, other->revoke_);
    std::swap(standby_, other->standby_);
    std::swap(active_, other->active_);
    std::swap(publish_, other->publish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyData_descriptor_;
  metadata.reflection = KeyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyState::kStateFieldNumber;
const int KeyState::kLastChangeFieldNumber;
const int KeyState::kMinimizeFieldNumber;
#endif  // !_MSC_VER

KeyState::KeyState() {
  SharedCtor();
}

void KeyState::InitAsDefaultInstance() {
}

KeyState::KeyState(const KeyState& from) {
  SharedCtor();
  MergeFrom(from);
}

void KeyState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  last_change_ = 0u;
  minimize_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyState::~KeyState() {
  SharedDtor();
}

void KeyState::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* KeyState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyState_descriptor_;
}

const KeyState& KeyState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_keystate_2eproto();  return *default_instance_;
}

KeyState* KeyState::default_instance_ = NULL;

KeyState* KeyState::New() const {
  return new KeyState;
}

void KeyState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    last_change_ = 0u;
    minimize_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ods.keystate.rrstate state = 1 [default = hidden];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (ods::keystate::rrstate_IsValid(value)) {
          set_state(static_cast< ods::keystate::rrstate >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_last_change;
        break;
      }
      
      // optional uint32 last_change = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_last_change:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &last_change_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_minimize;
        break;
      }
      
      // optional bool minimize = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_minimize:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &minimize_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    KeyState::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .ods.keystate.rrstate state = 1 [default = hidden];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  // optional uint32 last_change = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_change(), output);
  }
  
  // optional bool minimize = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->minimize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ods.keystate.rrstate state = 1 [default = hidden];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  // optional uint32 last_change = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_change(), target);
  }
  
  // optional bool minimize = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->minimize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ods.keystate.rrstate state = 1 [default = hidden];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional uint32 last_change = 2;
    if (has_last_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_change());
    }
    
    // optional bool minimize = 3 [default = false];
    if (has_minimize()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void KeyState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyState::MergeFrom(const KeyState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_state(from.state());
    }
    if (from._has_bit(1)) {
      set_last_change(from.last_change());
    }
    if (from._has_bit(2)) {
      set_minimize(from.minimize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyState::CopyFrom(const KeyState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyState::IsInitialized() const {
  
  return true;
}

void KeyState::Swap(KeyState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(last_change_, other->last_change_);
    std::swap(minimize_, other->minimize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyState_descriptor_;
  metadata.reflection = KeyState_reflection_;
  return metadata;
}


}  // namespace keystate
}  // namespace ods
