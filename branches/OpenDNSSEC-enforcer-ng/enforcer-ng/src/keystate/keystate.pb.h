// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_keystate_2eproto__INCLUDED
#define PROTOBUF_keystate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "xmlext.pb.h"

namespace ods {
namespace keystate {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_keystate_2eproto();
void protobuf_AssignDesc_keystate_2eproto();
void protobuf_ShutdownFile_keystate_2eproto();

class KeyStateDocument;
class EnforcerZone;
class KeyData;
class KeyState;

enum keyrole {
  KSK = 1,
  ZSK = 2,
  CSK = 3
};
bool keyrole_IsValid(int value);
const keyrole keyrole_MIN = KSK;
const keyrole keyrole_MAX = CSK;

const ::google::protobuf::EnumDescriptor* keyrole_descriptor();
inline const ::std::string& keyrole_Name(keyrole value) {
  return ::google::protobuf::internal::NameOfEnum(
    keyrole_descriptor(), value);
}
inline bool keyrole_Parse(
    const ::std::string& name, keyrole* value) {
  return ::google::protobuf::internal::ParseNamedEnum<keyrole>(
    keyrole_descriptor(), name, value);
}
enum rrstate {
  hidden = 0,
  rumoured = 1,
  committed = 2,
  omnipresent = 3,
  unretentive = 4,
  postcomitted = 5,
  revoked = 6
};
bool rrstate_IsValid(int value);
const rrstate rrstate_MIN = hidden;
const rrstate rrstate_MAX = revoked;

const ::google::protobuf::EnumDescriptor* rrstate_descriptor();
inline const ::std::string& rrstate_Name(rrstate value) {
  return ::google::protobuf::internal::NameOfEnum(
    rrstate_descriptor(), value);
}
inline bool rrstate_Parse(
    const ::std::string& name, rrstate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rrstate>(
    rrstate_descriptor(), name, value);
}
// ===================================================================

class KeyStateDocument : public ::google::protobuf::Message {
 public:
  KeyStateDocument();
  virtual ~KeyStateDocument();
  
  KeyStateDocument(const KeyStateDocument& from);
  
  inline KeyStateDocument& operator=(const KeyStateDocument& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyStateDocument& default_instance();
  void Swap(KeyStateDocument* other);
  
  // implements Message ----------------------------------------------
  
  KeyStateDocument* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyStateDocument& from);
  void MergeFrom(const KeyStateDocument& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ods.keystate.EnforcerZone zones = 1;
  inline int zones_size() const;
  inline void clear_zones();
  static const int kZonesFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::ods::keystate::EnforcerZone >& zones() const;
  inline ::google::protobuf::RepeatedPtrField< ::ods::keystate::EnforcerZone >* mutable_zones();
  inline const ::ods::keystate::EnforcerZone& zones(int index) const;
  inline ::ods::keystate::EnforcerZone* mutable_zones(int index);
  inline ::ods::keystate::EnforcerZone* add_zones();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::ods::keystate::EnforcerZone > zones_;
  friend void  protobuf_AddDesc_keystate_2eproto();
  friend void protobuf_AssignDesc_keystate_2eproto();
  friend void protobuf_ShutdownFile_keystate_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static KeyStateDocument* default_instance_;
};
// -------------------------------------------------------------------

class EnforcerZone : public ::google::protobuf::Message {
 public:
  EnforcerZone();
  virtual ~EnforcerZone();
  
  EnforcerZone(const EnforcerZone& from);
  
  inline EnforcerZone& operator=(const EnforcerZone& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnforcerZone& default_instance();
  void Swap(EnforcerZone* other);
  
  // implements Message ----------------------------------------------
  
  EnforcerZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnforcerZone& from);
  void MergeFrom(const EnforcerZone& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required string policy = 2;
  inline bool has_policy() const;
  inline void clear_policy();
  static const int kPolicyFieldNumber = 2;
  inline const ::std::string& policy() const;
  inline void set_policy(const ::std::string& value);
  inline void set_policy(const char* value);
  inline void set_policy(const char* value, size_t size);
  inline ::std::string* mutable_policy();
  
  // repeated .ods.keystate.KeyData keys = 3;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::ods::keystate::KeyData >& keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::ods::keystate::KeyData >* mutable_keys();
  inline const ::ods::keystate::KeyData& keys(int index) const;
  inline ::ods::keystate::KeyData* mutable_keys(int index);
  inline ::ods::keystate::KeyData* add_keys();
  
  // required bool signconf_needs_writing = 4;
  inline bool has_signconf_needs_writing() const;
  inline void clear_signconf_needs_writing();
  static const int kSignconfNeedsWritingFieldNumber = 4;
  inline bool signconf_needs_writing() const;
  inline void set_signconf_needs_writing(bool value);
  
  // required string signconf_path = 5;
  inline bool has_signconf_path() const;
  inline void clear_signconf_path();
  static const int kSignconfPathFieldNumber = 5;
  inline const ::std::string& signconf_path() const;
  inline void set_signconf_path(const ::std::string& value);
  inline void set_signconf_path(const char* value);
  inline void set_signconf_path(const char* value, size_t size);
  inline ::std::string* mutable_signconf_path();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* policy_;
  static const ::std::string _default_policy_;
  ::google::protobuf::RepeatedPtrField< ::ods::keystate::KeyData > keys_;
  bool signconf_needs_writing_;
  ::std::string* signconf_path_;
  static const ::std::string _default_signconf_path_;
  friend void  protobuf_AddDesc_keystate_2eproto();
  friend void protobuf_AssignDesc_keystate_2eproto();
  friend void protobuf_ShutdownFile_keystate_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static EnforcerZone* default_instance_;
};
// -------------------------------------------------------------------

class KeyData : public ::google::protobuf::Message {
 public:
  KeyData();
  virtual ~KeyData();
  
  KeyData(const KeyData& from);
  
  inline KeyData& operator=(const KeyData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyData& default_instance();
  void Swap(KeyData* other);
  
  // implements Message ----------------------------------------------
  
  KeyData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyData& from);
  void MergeFrom(const KeyData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string locator = 1;
  inline bool has_locator() const;
  inline void clear_locator();
  static const int kLocatorFieldNumber = 1;
  inline const ::std::string& locator() const;
  inline void set_locator(const ::std::string& value);
  inline void set_locator(const char* value);
  inline void set_locator(const char* value, size_t size);
  inline ::std::string* mutable_locator();
  
  // required uint32 algorithm = 2;
  inline bool has_algorithm() const;
  inline void clear_algorithm();
  static const int kAlgorithmFieldNumber = 2;
  inline ::google::protobuf::uint32 algorithm() const;
  inline void set_algorithm(::google::protobuf::uint32 value);
  
  // required uint32 inception = 3;
  inline bool has_inception() const;
  inline void clear_inception();
  static const int kInceptionFieldNumber = 3;
  inline ::google::protobuf::uint32 inception() const;
  inline void set_inception(::google::protobuf::uint32 value);
  
  // required .ods.keystate.KeyState ds = 4;
  inline bool has_ds() const;
  inline void clear_ds();
  static const int kDsFieldNumber = 4;
  inline const ::ods::keystate::KeyState& ds() const;
  inline ::ods::keystate::KeyState* mutable_ds();
  
  // required .ods.keystate.KeyState rrsig = 5;
  inline bool has_rrsig() const;
  inline void clear_rrsig();
  static const int kRrsigFieldNumber = 5;
  inline const ::ods::keystate::KeyState& rrsig() const;
  inline ::ods::keystate::KeyState* mutable_rrsig();
  
  // required .ods.keystate.KeyState dnskey = 6;
  inline bool has_dnskey() const;
  inline void clear_dnskey();
  static const int kDnskeyFieldNumber = 6;
  inline const ::ods::keystate::KeyState& dnskey() const;
  inline ::ods::keystate::KeyState* mutable_dnskey();
  
  // required .ods.keystate.keyrole role = 7;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 7;
  inline ods::keystate::keyrole role() const;
  inline void set_role(ods::keystate::keyrole value);
  
  // optional bool ds_seen = 8 [default = false];
  inline bool has_ds_seen() const;
  inline void clear_ds_seen();
  static const int kDsSeenFieldNumber = 8;
  inline bool ds_seen() const;
  inline void set_ds_seen(bool value);
  
  // optional bool submit_to_parent = 9 [default = false];
  inline bool has_submit_to_parent() const;
  inline void clear_submit_to_parent();
  static const int kSubmitToParentFieldNumber = 9;
  inline bool submit_to_parent() const;
  inline void set_submit_to_parent(bool value);
  
  // optional bool introducing = 10 [default = true];
  inline bool has_introducing() const;
  inline void clear_introducing();
  static const int kIntroducingFieldNumber = 10;
  inline bool introducing() const;
  inline void set_introducing(bool value);
  
  // optional bool revoke = 11 [default = false];
  inline bool has_revoke() const;
  inline void clear_revoke();
  static const int kRevokeFieldNumber = 11;
  inline bool revoke() const;
  inline void set_revoke(bool value);
  
  // optional bool standby = 12 [default = false];
  inline bool has_standby() const;
  inline void clear_standby();
  static const int kStandbyFieldNumber = 12;
  inline bool standby() const;
  inline void set_standby(bool value);
  
  // optional bool active = 13 [default = false];
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 13;
  inline bool active() const;
  inline void set_active(bool value);
  
  // optional bool publish = 14 [default = false];
  inline bool has_publish() const;
  inline void clear_publish();
  static const int kPublishFieldNumber = 14;
  inline bool publish() const;
  inline void set_publish(bool value);
  
  // optional bool _deleted = 100 [default = false];
  inline bool has__deleted() const;
  inline void clear__deleted();
  static const int kDeletedFieldNumber = 100;
  inline bool _deleted() const;
  inline void set__deleted(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* locator_;
  static const ::std::string _default_locator_;
  ::google::protobuf::uint32 algorithm_;
  ::google::protobuf::uint32 inception_;
  ::ods::keystate::KeyState* ds_;
  ::ods::keystate::KeyState* rrsig_;
  ::ods::keystate::KeyState* dnskey_;
  int role_;
  bool ds_seen_;
  bool submit_to_parent_;
  bool introducing_;
  bool revoke_;
  bool standby_;
  bool active_;
  bool publish_;
  bool _deleted_;
  friend void  protobuf_AddDesc_keystate_2eproto();
  friend void protobuf_AssignDesc_keystate_2eproto();
  friend void protobuf_ShutdownFile_keystate_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static KeyData* default_instance_;
};
// -------------------------------------------------------------------

class KeyState : public ::google::protobuf::Message {
 public:
  KeyState();
  virtual ~KeyState();
  
  KeyState(const KeyState& from);
  
  inline KeyState& operator=(const KeyState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyState& default_instance();
  void Swap(KeyState* other);
  
  // implements Message ----------------------------------------------
  
  KeyState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyState& from);
  void MergeFrom(const KeyState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ods.keystate.rrstate state = 1 [default = hidden];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ods::keystate::rrstate state() const;
  inline void set_state(ods::keystate::rrstate value);
  
  // optional uint32 last_change = 2;
  inline bool has_last_change() const;
  inline void clear_last_change();
  static const int kLastChangeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_change() const;
  inline void set_last_change(::google::protobuf::uint32 value);
  
  // optional bool minimize = 3 [default = false];
  inline bool has_minimize() const;
  inline void clear_minimize();
  static const int kMinimizeFieldNumber = 3;
  inline bool minimize() const;
  inline void set_minimize(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int state_;
  ::google::protobuf::uint32 last_change_;
  bool minimize_;
  friend void  protobuf_AddDesc_keystate_2eproto();
  friend void protobuf_AssignDesc_keystate_2eproto();
  friend void protobuf_ShutdownFile_keystate_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static KeyState* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// KeyStateDocument

// repeated .ods.keystate.EnforcerZone zones = 1;
inline int KeyStateDocument::zones_size() const {
  return zones_.size();
}
inline void KeyStateDocument::clear_zones() {
  zones_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::ods::keystate::EnforcerZone >&
KeyStateDocument::zones() const {
  return zones_;
}
inline ::google::protobuf::RepeatedPtrField< ::ods::keystate::EnforcerZone >*
KeyStateDocument::mutable_zones() {
  return &zones_;
}
inline const ::ods::keystate::EnforcerZone& KeyStateDocument::zones(int index) const {
  return zones_.Get(index);
}
inline ::ods::keystate::EnforcerZone* KeyStateDocument::mutable_zones(int index) {
  return zones_.Mutable(index);
}
inline ::ods::keystate::EnforcerZone* KeyStateDocument::add_zones() {
  return zones_.Add();
}

// -------------------------------------------------------------------

// EnforcerZone

// required string name = 1;
inline bool EnforcerZone::has_name() const {
  return _has_bit(0);
}
inline void EnforcerZone::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& EnforcerZone::name() const {
  return *name_;
}
inline void EnforcerZone::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EnforcerZone::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EnforcerZone::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnforcerZone::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required string policy = 2;
inline bool EnforcerZone::has_policy() const {
  return _has_bit(1);
}
inline void EnforcerZone::clear_policy() {
  if (policy_ != &_default_policy_) {
    policy_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& EnforcerZone::policy() const {
  return *policy_;
}
inline void EnforcerZone::set_policy(const ::std::string& value) {
  _set_bit(1);
  if (policy_ == &_default_policy_) {
    policy_ = new ::std::string;
  }
  policy_->assign(value);
}
inline void EnforcerZone::set_policy(const char* value) {
  _set_bit(1);
  if (policy_ == &_default_policy_) {
    policy_ = new ::std::string;
  }
  policy_->assign(value);
}
inline void EnforcerZone::set_policy(const char* value, size_t size) {
  _set_bit(1);
  if (policy_ == &_default_policy_) {
    policy_ = new ::std::string;
  }
  policy_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnforcerZone::mutable_policy() {
  _set_bit(1);
  if (policy_ == &_default_policy_) {
    policy_ = new ::std::string;
  }
  return policy_;
}

// repeated .ods.keystate.KeyData keys = 3;
inline int EnforcerZone::keys_size() const {
  return keys_.size();
}
inline void EnforcerZone::clear_keys() {
  keys_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::ods::keystate::KeyData >&
EnforcerZone::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::ods::keystate::KeyData >*
EnforcerZone::mutable_keys() {
  return &keys_;
}
inline const ::ods::keystate::KeyData& EnforcerZone::keys(int index) const {
  return keys_.Get(index);
}
inline ::ods::keystate::KeyData* EnforcerZone::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline ::ods::keystate::KeyData* EnforcerZone::add_keys() {
  return keys_.Add();
}

// required bool signconf_needs_writing = 4;
inline bool EnforcerZone::has_signconf_needs_writing() const {
  return _has_bit(3);
}
inline void EnforcerZone::clear_signconf_needs_writing() {
  signconf_needs_writing_ = false;
  _clear_bit(3);
}
inline bool EnforcerZone::signconf_needs_writing() const {
  return signconf_needs_writing_;
}
inline void EnforcerZone::set_signconf_needs_writing(bool value) {
  _set_bit(3);
  signconf_needs_writing_ = value;
}

// required string signconf_path = 5;
inline bool EnforcerZone::has_signconf_path() const {
  return _has_bit(4);
}
inline void EnforcerZone::clear_signconf_path() {
  if (signconf_path_ != &_default_signconf_path_) {
    signconf_path_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& EnforcerZone::signconf_path() const {
  return *signconf_path_;
}
inline void EnforcerZone::set_signconf_path(const ::std::string& value) {
  _set_bit(4);
  if (signconf_path_ == &_default_signconf_path_) {
    signconf_path_ = new ::std::string;
  }
  signconf_path_->assign(value);
}
inline void EnforcerZone::set_signconf_path(const char* value) {
  _set_bit(4);
  if (signconf_path_ == &_default_signconf_path_) {
    signconf_path_ = new ::std::string;
  }
  signconf_path_->assign(value);
}
inline void EnforcerZone::set_signconf_path(const char* value, size_t size) {
  _set_bit(4);
  if (signconf_path_ == &_default_signconf_path_) {
    signconf_path_ = new ::std::string;
  }
  signconf_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnforcerZone::mutable_signconf_path() {
  _set_bit(4);
  if (signconf_path_ == &_default_signconf_path_) {
    signconf_path_ = new ::std::string;
  }
  return signconf_path_;
}

// -------------------------------------------------------------------

// KeyData

// required string locator = 1;
inline bool KeyData::has_locator() const {
  return _has_bit(0);
}
inline void KeyData::clear_locator() {
  if (locator_ != &_default_locator_) {
    locator_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& KeyData::locator() const {
  return *locator_;
}
inline void KeyData::set_locator(const ::std::string& value) {
  _set_bit(0);
  if (locator_ == &_default_locator_) {
    locator_ = new ::std::string;
  }
  locator_->assign(value);
}
inline void KeyData::set_locator(const char* value) {
  _set_bit(0);
  if (locator_ == &_default_locator_) {
    locator_ = new ::std::string;
  }
  locator_->assign(value);
}
inline void KeyData::set_locator(const char* value, size_t size) {
  _set_bit(0);
  if (locator_ == &_default_locator_) {
    locator_ = new ::std::string;
  }
  locator_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyData::mutable_locator() {
  _set_bit(0);
  if (locator_ == &_default_locator_) {
    locator_ = new ::std::string;
  }
  return locator_;
}

// required uint32 algorithm = 2;
inline bool KeyData::has_algorithm() const {
  return _has_bit(1);
}
inline void KeyData::clear_algorithm() {
  algorithm_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 KeyData::algorithm() const {
  return algorithm_;
}
inline void KeyData::set_algorithm(::google::protobuf::uint32 value) {
  _set_bit(1);
  algorithm_ = value;
}

// required uint32 inception = 3;
inline bool KeyData::has_inception() const {
  return _has_bit(2);
}
inline void KeyData::clear_inception() {
  inception_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 KeyData::inception() const {
  return inception_;
}
inline void KeyData::set_inception(::google::protobuf::uint32 value) {
  _set_bit(2);
  inception_ = value;
}

// required .ods.keystate.KeyState ds = 4;
inline bool KeyData::has_ds() const {
  return _has_bit(3);
}
inline void KeyData::clear_ds() {
  if (ds_ != NULL) ds_->::ods::keystate::KeyState::Clear();
  _clear_bit(3);
}
inline const ::ods::keystate::KeyState& KeyData::ds() const {
  return ds_ != NULL ? *ds_ : *default_instance_->ds_;
}
inline ::ods::keystate::KeyState* KeyData::mutable_ds() {
  _set_bit(3);
  if (ds_ == NULL) ds_ = new ::ods::keystate::KeyState;
  return ds_;
}

// required .ods.keystate.KeyState rrsig = 5;
inline bool KeyData::has_rrsig() const {
  return _has_bit(4);
}
inline void KeyData::clear_rrsig() {
  if (rrsig_ != NULL) rrsig_->::ods::keystate::KeyState::Clear();
  _clear_bit(4);
}
inline const ::ods::keystate::KeyState& KeyData::rrsig() const {
  return rrsig_ != NULL ? *rrsig_ : *default_instance_->rrsig_;
}
inline ::ods::keystate::KeyState* KeyData::mutable_rrsig() {
  _set_bit(4);
  if (rrsig_ == NULL) rrsig_ = new ::ods::keystate::KeyState;
  return rrsig_;
}

// required .ods.keystate.KeyState dnskey = 6;
inline bool KeyData::has_dnskey() const {
  return _has_bit(5);
}
inline void KeyData::clear_dnskey() {
  if (dnskey_ != NULL) dnskey_->::ods::keystate::KeyState::Clear();
  _clear_bit(5);
}
inline const ::ods::keystate::KeyState& KeyData::dnskey() const {
  return dnskey_ != NULL ? *dnskey_ : *default_instance_->dnskey_;
}
inline ::ods::keystate::KeyState* KeyData::mutable_dnskey() {
  _set_bit(5);
  if (dnskey_ == NULL) dnskey_ = new ::ods::keystate::KeyState;
  return dnskey_;
}

// required .ods.keystate.keyrole role = 7;
inline bool KeyData::has_role() const {
  return _has_bit(6);
}
inline void KeyData::clear_role() {
  role_ = 1;
  _clear_bit(6);
}
inline ods::keystate::keyrole KeyData::role() const {
  return static_cast< ods::keystate::keyrole >(role_);
}
inline void KeyData::set_role(ods::keystate::keyrole value) {
  GOOGLE_DCHECK(ods::keystate::keyrole_IsValid(value));
  _set_bit(6);
  role_ = value;
}

// optional bool ds_seen = 8 [default = false];
inline bool KeyData::has_ds_seen() const {
  return _has_bit(7);
}
inline void KeyData::clear_ds_seen() {
  ds_seen_ = false;
  _clear_bit(7);
}
inline bool KeyData::ds_seen() const {
  return ds_seen_;
}
inline void KeyData::set_ds_seen(bool value) {
  _set_bit(7);
  ds_seen_ = value;
}

// optional bool submit_to_parent = 9 [default = false];
inline bool KeyData::has_submit_to_parent() const {
  return _has_bit(8);
}
inline void KeyData::clear_submit_to_parent() {
  submit_to_parent_ = false;
  _clear_bit(8);
}
inline bool KeyData::submit_to_parent() const {
  return submit_to_parent_;
}
inline void KeyData::set_submit_to_parent(bool value) {
  _set_bit(8);
  submit_to_parent_ = value;
}

// optional bool introducing = 10 [default = true];
inline bool KeyData::has_introducing() const {
  return _has_bit(9);
}
inline void KeyData::clear_introducing() {
  introducing_ = true;
  _clear_bit(9);
}
inline bool KeyData::introducing() const {
  return introducing_;
}
inline void KeyData::set_introducing(bool value) {
  _set_bit(9);
  introducing_ = value;
}

// optional bool revoke = 11 [default = false];
inline bool KeyData::has_revoke() const {
  return _has_bit(10);
}
inline void KeyData::clear_revoke() {
  revoke_ = false;
  _clear_bit(10);
}
inline bool KeyData::revoke() const {
  return revoke_;
}
inline void KeyData::set_revoke(bool value) {
  _set_bit(10);
  revoke_ = value;
}

// optional bool standby = 12 [default = false];
inline bool KeyData::has_standby() const {
  return _has_bit(11);
}
inline void KeyData::clear_standby() {
  standby_ = false;
  _clear_bit(11);
}
inline bool KeyData::standby() const {
  return standby_;
}
inline void KeyData::set_standby(bool value) {
  _set_bit(11);
  standby_ = value;
}

// optional bool active = 13 [default = false];
inline bool KeyData::has_active() const {
  return _has_bit(12);
}
inline void KeyData::clear_active() {
  active_ = false;
  _clear_bit(12);
}
inline bool KeyData::active() const {
  return active_;
}
inline void KeyData::set_active(bool value) {
  _set_bit(12);
  active_ = value;
}

// optional bool publish = 14 [default = false];
inline bool KeyData::has_publish() const {
  return _has_bit(13);
}
inline void KeyData::clear_publish() {
  publish_ = false;
  _clear_bit(13);
}
inline bool KeyData::publish() const {
  return publish_;
}
inline void KeyData::set_publish(bool value) {
  _set_bit(13);
  publish_ = value;
}

// optional bool _deleted = 100 [default = false];
inline bool KeyData::has__deleted() const {
  return _has_bit(14);
}
inline void KeyData::clear__deleted() {
  _deleted_ = false;
  _clear_bit(14);
}
inline bool KeyData::_deleted() const {
  return _deleted_;
}
inline void KeyData::set__deleted(bool value) {
  _set_bit(14);
  _deleted_ = value;
}

// -------------------------------------------------------------------

// KeyState

// optional .ods.keystate.rrstate state = 1 [default = hidden];
inline bool KeyState::has_state() const {
  return _has_bit(0);
}
inline void KeyState::clear_state() {
  state_ = 0;
  _clear_bit(0);
}
inline ods::keystate::rrstate KeyState::state() const {
  return static_cast< ods::keystate::rrstate >(state_);
}
inline void KeyState::set_state(ods::keystate::rrstate value) {
  GOOGLE_DCHECK(ods::keystate::rrstate_IsValid(value));
  _set_bit(0);
  state_ = value;
}

// optional uint32 last_change = 2;
inline bool KeyState::has_last_change() const {
  return _has_bit(1);
}
inline void KeyState::clear_last_change() {
  last_change_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 KeyState::last_change() const {
  return last_change_;
}
inline void KeyState::set_last_change(::google::protobuf::uint32 value) {
  _set_bit(1);
  last_change_ = value;
}

// optional bool minimize = 3 [default = false];
inline bool KeyState::has_minimize() const {
  return _has_bit(2);
}
inline void KeyState::clear_minimize() {
  minimize_ = false;
  _clear_bit(2);
}
inline bool KeyState::minimize() const {
  return minimize_;
}
inline void KeyState::set_minimize(bool value) {
  _set_bit(2);
  minimize_ = value;
}


}  // namespace keystate
}  // namespace ods

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ods::keystate::keyrole>() {
  return ods::keystate::keyrole_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ods::keystate::rrstate>() {
  return ods::keystate::rrstate_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_keystate_2eproto__INCLUDED
