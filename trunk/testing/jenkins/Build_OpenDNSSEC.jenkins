source "$WORKSPACE/src/trunk/testing/jenkins/versions.jenkins" || exit 1

# Enviroment variables passed in from jenkins jobs may contain hyphens and dots. 
# This breaks if you try to use the value of the environment variable to build 
# other environment variables so replace them with underscores.
_OpenDNSSEC_BRANCH=`echo $OpenDNSSEC_BRANCH | sed 's/\-/_/g'`
_OpenDNSSEC_BRANCH=`echo $_OpenDNSSEC_BRANCH | sed 's/\./_/g'`
_SOFTHSM_RELEASE=`echo $SOFTHSM_RELEASE | sed 's/\-/_/g'`
_SOFTHSM_RELEASE=`echo $_SOFTHSM_RELEASE | sed 's/\./_/g'`
SVN_REVISION=`eval echo \$\{TEST_CODE_SVN_REVISION\}.\$\{${_OpenDNSSEC_BRANCH}_SVN_REVISION\}.\$\{${_SOFTHSM_RELEASE}_SVN_REVISION\}.\$\{BOTAN_VERSION\}.\$\{DATABASE_TYPE\}`

INSTALL_TAG="${OpenDNSSEC_BRANCH}/${SOFTHSM_RELEASE}_${BOTAN_VERSION}_${DATABASE_TYPE}"
source "$WORKSPACE/src/trunk/testing/jenkins/functions.jenkins" && init_build || exit 1

check_if_built opendnssec && exit 0

start_build opendnssec

# Botan version is provided by the jenkins job. Append to library path so that the build
# can find the Botan libraries.
append_ld_library_path "$WORKSPACE_ROOT/root/$BOTAN_VERSION/lib"
# The SoftHSM release version is provided by the jenkins job. Append to library path so that the build
# can find the libraries.
append_ld_library_path "$WORKSPACE_ROOT/root/${SOFTHSM_RELEASE}/${BOTAN_VERSION}/lib"
# This is needed if the $MAKE check lines further down are re-instated.
prepend_path "$WORKSPACE_ROOT/root/${SOFTHSM_RELEASE}/${BOTAN_VERSION}/bin"

if [ x$DATABASE_TYPE == "xmysql" ] ; then
    DATABASE_STUFF="--with-database-backend=$DATABASE_TYPE --with-dbname=KASPtest --with-dbhost=localhost --with-dbuser=root --with-dbpass=root"
elif [ x$DATABASE_TYPE == "xsqlite3" ] ; then
    DATABASE_STUFF="--with-database-backend=$DATABASE_TYPE --with-dbname=opendnssec-build-test"
else
  exit 1
fi
PKCS11_STUFF="--with-pkcs11-softhsm=$WORKSPACE_ROOT/root/${SOFTHSM_RELEASE}/${BOTAN_VERSION}/lib/libsofthsm.so"
CUNIT_STUFF="--with-cunit=$WORKSPACE_ROOT/root/CUnit_$CUNIT_VER_MAJOR.$CUNIT_VER_MINOR-$CUNIT_VER_PATCH"
LDNS_STUFF="--with-ldns=$WORKSPACE_ROOT/root/LDNS_$LDNS_VER_MAJOR.$LDNS_VER_MINOR.$LDNS_VER_PATCH"

# per node configs
case "$NODE_NAME" in
	solaris* )
	    #Find a working version of sort, mysqladmin and ar
	    prepend_path "/usr/gnu/bin"
	    prepend_path "/usr/mysql/5.1/bin"
	    prepend_path "/usr/ccs/bin"
	    CONFIGURE="--prefix=$INSTALL_ROOT --disable-auditor $PKCS11_STUFF  $CUNIT_STUFF $DATABASE_STUFF  --enable-timeshift $LDNS_STUFF CFLAGS=-std=c99"
	    ;;
	redhat* | \
	centos* | \
	ubuntu* | \
	freebsd* )
		CONFIGURE="--prefix=$INSTALL_ROOT --disable-auditor $PKCS11_STUFF $CUNIT_STUFF $DATABASE_STUFF --enable-timeshift $LDNS_STUFF"
		;;
esac

# per node build
build_ok=0
case "$NODE_NAME" in
	solaris* | \
	redhat* | \
	centos* | \
	freebsd* | \
	ubuntu* )
		(
		    if [ x${OpenDNSSEC_BRANCH} == "xOpenDNSSEC-trunk" ] ; then
    			cd "$WORKSPACE/src/trunk/OpenDNSSEC"
    		else
    			cd "$WORKSPACE/src/branches/${OpenDNSSEC_BRANCH}"
    		fi
			
			sh autogen.sh &&
			mkdir -p build &&
			cd build &&
			../configure $CONFIGURE &&
			$MAKE &&
#			$MAKE check &&
			$MAKE install
		) &&
		build_ok=1
		;;
esac

if [ "$build_ok" -eq 1 ]; then
	set_build_ok opendnssec || exit 1
	exit 0
fi

exit 1
