append_path ()
{
	if [ -d "$1" ]; then
		if [ -n "$PATH" ]; then
			echo "$PATH" | grep -q -- "$1" 2>/dev/null && return;
			PATH="$PATH:$1"
		else
			PATH="$1"
		fi
		export PATH
	fi
}

prepend_path ()
{
	if [ -d "$1" ]; then
		if [ -n "$PATH" ]; then
			echo "$PATH" | grep -q -- "$1" 2>/dev/null && return;
			PATH="$1:$PATH"
		else
			PATH="$1"
		fi
		export PATH
	fi
}

append_cflags ()
{
	if [ -d "$1" ]; then
		if [ -n "$CFLAGS" ]; then
			echo "$CFLAGS" | grep -q -- "$1" 2>/dev/null && return;
			CFLAGS="$CFLAGS $1"
		else
			CFLAGS="$1"
		fi
		export CFLAGS
	fi
}

append_cppflags ()
{
	if [ -d "$1" ]; then
		if [ -n "$CPPFLAGS" ]; then
			echo "$CPPFLAGS" | grep -q -- "$1" 2>/dev/null && return;
			CPPFLAGS="$CPPFLAGS $1"
		else
			CPPFLAGS="$1"
		fi
		export CPPFLAGS
	fi
}

append_ldflags ()
{
	if [ -d "$1" ]; then
		if [ -n "$LDFLAGS" ]; then
			echo "$LDFLAGS" | grep -q -- "$1" 2>/dev/null && return;
			LDFLAGS="$LDFLAGS $1"
		else
			LDFLAGS="$1"
		fi
		export LDFLAGS
	fi
}

append_ld_library_path ()
{
	if [ -d "$1" ]; then
		if [ -n "$LD_LIBRARY_PATH" ]; then
			echo "$LD_LIBRARY_PATH" | grep -q -- "$1" 2>/dev/null && return;
			LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$1"
		else
			LD_LIBRARY_PATH="$1"
		fi
		export LD_LIBRARY_PATH
	fi
}

find_jenkins_workspace_root ()
{
	if [ -z "$WORKSPACE" -o ! -d "$WORKSPACE" ]; then
		echo "find_jenkins_workspace_root: Unable to find workspace root since no WORKSPACE has been defined" >&2
		return -1
	fi

	local workspace="$WORKSPACE"
	local max_iter=20
	local currdir
	
	while [ "$max_iter" -gt 0 ]; do
		# check if the last dir on the path is workspace
		currdir=`echo "$workspace" | sed 's%.*/%%'`
		if [ "$currdir" = "workspace" ]; then
			break
		fi
		
		# remove the last dir on the path
		workspace=`echo "$workspace" | sed 's%/[^/]*$%%'`
		
		max_iter=$(( max_iter - 1))
	done

	if [ -n "$workspace" -a "$max_iter" -gt 0 ]; then
		WORKSPACE_ROOT="$workspace"
		return
	fi

	echo "find_jenkins_workspace_root: Failed to find workspace root in WORKSPACE=$WORKSPACE" >&2
	return 1
}

find_program ()
{
	if [ -n "$1" ]; then
		local path=`which "$1" 2>/dev/null`
		if [ -n "$path" -a -x "$path" ]; then
			echo "$path"
			return
		fi
	fi
	
	return 1
}
	
find_make ()
{
	local make
	local program
	
	for program in make gmake; do
		make=`find_program "$program"`
		if [ -n "$make" ]; then
			export MAKE="$make"
			return
		fi
	done
	
	return 1
}

# Find correct program to perform md5 hash
find_md5sum ()
{
    local md5sum
    local program
    
    for program in md5sum md5; do
		md5sum=`find_program "$program"`
		if [ -n "$md5sum" ]; then
		    MD5SUM="$md5sum"
			export MD5SUM
			return
		fi
	done

	return 1
}

# Find correct program to perform SHA1 hash
find_sha1sum ()
{
    local shasum
    local program

    for program in sha1 sha1sum shasum; do
    	shasum=`find_program "$program"`
    	if [ -n "$shasum" ]; then
    		local shasum_filename=`echo "$shasum" | sed 's%.*/%%'`
    		if [ "$shasum_filename" = "shasum" ]; then
    			SHA1SUM="$shasum -a 1"
    		else
    			SHA1SUM="$shasum"
    		fi
    		export SHA1SUM
    		return
    	fi
    done

    return 1
}

# Find correct program to perform SHA256 hash
find_sha256sum ()
{
	local shasum
	local program
	
	for program in sha256sum shasum; do
		shasum=`find_program "$program"`
		if [ -n "$shasum" ]; then
			local shasum_filename=`echo "$shasum" | sed 's%.*/%%'`
			if [ "$shasum_filename" = "shasum" ]; then
				SHA256SUM="$shasum -a 256"
			else
				SHA256SUM="$shasum"
			fi
			export SHA256SUM
			return
		fi
	done

	return 1
}

# Returns all possible hash functions (Assume that no one is publishing other SHA2 hashs)
find_hashs ()
{
    find_md5sum \
    && find_sha1sum \
    && find_sha256sum \
    && return
    
    return 1
}

find_wget ()
{
	local wget
	local program
	
	for program in wget; do
		wget=`find_program "$program"`
		if [ -n "$wget" ]; then
			export WGET="$wget"
			return
		fi
	done

	return 1
}

setup_install_root ()
{
	if [ -n "$INSTALL_ROOT" ]; then
		if [ -d "$INSTALL_ROOT" ]; then
			return
		else
			return 1
		fi
	fi

	if [ ! -d "$WORKSPACE_ROOT/root" ]; then
		if ! mkdir "$WORKSPACE_ROOT/root"; then
			echo "setup_install_root: Unable to create INSTALL_ROOT at $WORKSPACE_ROOT/root" >&2
			return 1
		fi
	fi
	
	if [ -n "$INSTALL_TAG" ]; then
		if [ ! -d "$WORKSPACE_ROOT/root/$INSTALL_TAG" ]; then
			if ! mkdir "$WORKSPACE_ROOT/root/$INSTALL_TAG"; then
				echo "setup_install_root: Unable to create INSTALL_ROOT at $WORKSPACE_ROOT/root/$INSTALL_TAG" >&2
				return 1
			fi
		fi
		
		INSTALL_ROOT="$WORKSPACE_ROOT/root/$INSTALL_TAG"

		if [ -d "$INSTALL_ROOT/bin" ]; then
			prepend_path "$INSTALL_ROOT/bin"
		fi
		if [ -d "$INSTALL_ROOT/sbin" ]; then
			prepend_path "$INSTALL_ROOT/sbin"
		fi
		if [ -d "$INSTALL_ROOT/lib" ]; then
			append_ldflags "-L$INSTALL_ROOT/lib"
			append_ld_library_path "$INSTALL_ROOT/lib"
		fi
		if [ -d "$INSTALL_ROOT/include" ]; then
			append_cflags "-I$INSTALL_ROOT/include"
			append_cppflags "-I$INSTALL_ROOT/include"
		fi
		
		return
	fi
	
	echo "setup_install_root: INSTALL_TAG or INSTALL_ROOT is not set, need to know in where to build/test" >&2
	return 1
}

init_build ()
{
	find_jenkins_workspace_root || exit 1
	setup_install_root || exit 1
	find_make || exit 1
	find_wget || exit 1
	find_hashs || exit 1
#	find_shasum || exit 1
}

init_test ()
{
	find_jenkins_workspace_root || exit 1
	setup_install_root || exit 1
	find_hashs || exit 1
#	find_shasum || exit 1
}

check_if_built ()
{
	if [ -z "$1" ]; then
		echo "usage: check_if_build_ok <name tag>" >&2
		exit 1
	fi
	
	if [ -z "$SVN_REVISION" ]; then
		echo "check_if_built: No SVN_REVISION is set, can't check if build is ok!" >&2
		exit 1
	fi
	
	local name_tag="$1"
	
	if [ -f "$INSTALL_ROOT/.$name_tag.build" ]; then
		local build_svn_rev=`cat "$INSTALL_ROOT/.$name_tag.build"`
		
		if [ "$SVN_REVISION" = "$build_svn_rev" ]; then
			return
		fi
	fi
	
	return 1
}

start_build ()
{
	if [ -z "$1" ]; then
		echo "usage: start_build <name tag>" >&2
		exit 1
	fi
	
	local name_tag="$1"
	
	rm -f "$INSTALL_ROOT/.$name_tag.ok"
}

set_build_ok ()
{
	if [ -z "$1" ]; then
		echo "usage: set_build_ok <name tag>" >&2
		exit 1
	fi
	
	if [ -z "$SVN_REVISION" ]; then
		echo "set_build_ok: No SVN_REVISION is set, can't check if build is ok!" >&2
		exit 1
	fi
	
	local name_tag="$1"

	if [ -f "$INSTALL_ROOT/.$name_tag.ok" ]; then
		echo "set_build_ok: Build already mark ok, this should not happend. Did you forget to start_build?" >&2
		exit 1
	fi

	echo "$SVN_REVISION" > "$INSTALL_ROOT/.$name_tag.build"
	touch "$INSTALL_ROOT/.$name_tag.ok"

	if [ -f "$INSTALL_ROOT/.$name_tag.build" ]; then
		local build_svn_rev=`cat "$INSTALL_ROOT/.$name_tag.build"`
		
		if [ "$SVN_REVISION" = "$build_svn_rev" ]; then
			return
		fi
	fi
	
	return 1
}

require ()
{
	if [ -z "$1" ]; then
		echo "usage: set_build_ok <name tag>" >&2
		exit 1
	fi
	
	local name_tag="$1"
	
	if [ ! -f "$INSTALL_ROOT/.$name_tag.ok" ]; then
		echo "require: Required program $name_tag not found or not built!" >&2
		exit 1
	fi
}

check_hash ()
{
    if [ -z "$1" -o -z "$2" ]; then
		echo "usage: check_hash <filename> <hash>" >&2
		exit 1
	fi
	
	local filename="$1"
	local hash="$2"
	local file_hash

    case ${#hash} in
        32 )
            export HASH_TYPE=$MD5SUM
            ;;
    	40 )
    	    export HASH_TYPE=$SHA1SUM
    	    ;;
    	64 )
    	    export HASH_TYPE=$SHA256SUM
    	    ;;
    	* )
    	    echo "Unknown hash type" >&2
        	exit 1
        	;;
    esac
	
	if [ -f "$filename" ]; then
	    if [ "$HASH_TYPE" == "$MD5SUM" ]; then
	        file_hash=`$HASH_TYPE "$filename" | awk '{print $4}'`
	    else
		    file_hash=`$HASH_TYPE "$filename" | awk '{print $1}'`
		fi
		if [ "$hash" = "$file_hash" ]; then
			return
		fi
	fi
	
	return 1
	
}

fetch_src ()
{
	if [ -z "$1" -o -z "$2" -o -z "$3" ]; then
		echo "usage: fetch_src <url> <filename> <hash>" >&2
		exit 1
	fi
	
	local url="$1"
	local filename="$2"
	local path_filename
    local hash="$3"
    
	
	if [ ! -d "$INSTALL_ROOT/var/cache/files" ]; then
		if ! mkdir -p "$INSTALL_ROOT/var/cache/files"; then
			echo "fetch_src: Unable to create cache directory $INSTALL_ROOT/var/cache/files!" >&2
			exit 1
		fi
	fi

	path_filename="$INSTALL_ROOT/var/cache/files/$filename"

	if [ -f "$path_filename" ]; then
		if check_hash "$path_filename" "$hash"; then
			echo "$path_filename"
			return
		fi
		if ! rm -f "$path_filename"; then
			echo "fetch_src: Unable to remove old invalid file $path_filename!" >&2
			exit 1
		fi
	fi

	$WGET -O "$path_filename" "$url"
	
	if [ ! -f "$path_filename" ]; then
		echo "fetch_src: File at $url not found at $path_filename!" >&2
		exit 1
	fi
	
	if ! check_hash "$path_filename" "$hash"; then
		echo "fetch_src: SHA256 checksum does not match for $path_filename!" >&2
		exit 1
	fi
	
	echo "$path_filename"
}
