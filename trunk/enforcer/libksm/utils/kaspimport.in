#!@PERL@ -w
use strict;
use DBI;
use XML::LibXML;
use XML::LibXML::XPathContext;
use DateTime::Format::Duration::XSD;
use DateTime::Duration;
use Getopt::Std     qw(getopts);

use vars (
    q!$opt_h!, # db host
    q!$opt_u!, # db user
    q!$opt_s!, # db schema
    q!$opt_p!, # db password
    q!$opt_d!, # debug mode
    q!$opt_f!, # sqlite3 filename
    q!$opt_i!, # install DB flag
);

getopts('h:u:s:p:df:i') or die "bad usage";

my $debug = $opt_d;
my $dbh;
 my $dbtype = "@DB_TYPE@";
 if ($dbtype eq "SQLITE3") {
   my $sqlitefile = $opt_f;
   if ($opt_i) {
     print "Clearing out the Database.\n";
     my $sql_cmd;
     $sql_cmd = "@sqlite3_path@ $sqlitefile";
     `$sql_cmd < @bindir@/database_create.sqlite3`;
  }   
    $dbh =
       DBI->connect( "DBI:SQLite:dbname=$sqlitefile","","");
 
 } else {
    my $dbhost = $opt_h;
    my $dbname = $opt_s;
    my $dbuser = $opt_u;
    my $dbpass = $opt_p;
    
    #Clear out the Database.
    if ($opt_i) {
      print "Clearing out the Database.\n";
      my $mysql_cmd;
      $mysql_cmd = "@mysql_path@ -u $dbuser -h $dbhost -p $dbpass $dbname" if ($dbpass);
      $mysql_cmd = "@mysql_path@ -u $dbuser -h $dbhost $dbname" if (! $dbpass);
      
      `$mysql_cmd < @bindir@/database_create.mysql`;
    }
    $dbh =
      DBI->connect( "DBI:mysql:$dbname:$dbhost", $dbuser, $dbpass,
    	{ RaiseError => 1, PrintError => 0, PrintWarn => 1, AutoCommit => 0 } );
 }

  print "Using version " . XML::LibXML::LIBXML_DOTTED_VERSION . " of libxml.\n"
  if ($debug);

  my $confxml = "@sysconfdir@/opendnssec/conf.xml";
  my $confrng = "@sysconfdir@/opendnssec/conf.rng";
  my $kaspxml = "@sysconfdir@/opendnssec/kasp.xml";
  my $kasprng = "@sysconfdir@/opendnssec/kasp.rng";
  my $zonelistxml = "@sysconfdir@/opendnssec/zonelist.xml";
  my $zonelistrng = "@sysconfdir@/opendnssec/zonelist.rng";

  #Stuff in config.xml now read directly by applications
  #but we need the names of the security modules in the DB

  # Read doc
  my $parser2 = XML::LibXML->new();
  my $doc2    = $parser2->parse_file($confxml);

  # Validate
  my $rngschema2 = XML::LibXML::RelaxNG->new( location => $confrng );

  # This will exit if validation fails and print errors
  eval { $rngschema2->validate($doc2); };

  # Read the XML using XPATH
  my $xpc2 = XML::LibXML::XPathContext->new($doc2);

  my $configuration = $xpc2->find('Configuration')->get_node(1);

  #Now import HSM data
  my $repolist = $configuration->find('RepositoryList')->get_node(1);

  #Now import zone data
  my $repos = $repolist->findnodes('Repository');
  foreach my $repo ( $repos->get_nodelist() ) {
    # We only need the name and capacity. The rest is handled by libhsm
  	my $rname   = $repo->find("\@name")->string_value();
  	my $rcapacity = $repo->find("Capacity")->string_value();
  	insertrepo( $rname, $rcapacity);
  }



# Read doc
my $parser = XML::LibXML->new();
my $doc    = $parser->parse_file($kaspxml);

# Validate
my $rngschema = XML::LibXML::RelaxNG->new( location => $kasprng );

# This will exit if validation fails and print errors
eval { $rngschema->validate($doc); };

# Read the XML using XPATH
my $xpc = XML::LibXML::XPathContext->new($doc);

my $kasp = $xpc->find('KASP')->get_node(1);

my $policies = $kasp->findnodes('Policy');

foreach my $policy ( $policies->get_nodelist() ) {

	# Create policy
	my $pname = $policy->find("\@name")->string_value();
	my $pdis  = $policy->find("description")->string_value();
	print "Importing policy $pname.\n" if ($debug);
	my $rows =
	  $dbh->do( "INSERT INTO policies (name, description) VALUES (?,?)",
		undef, $pname, $pdis )
	  or die $dbh->errstr;
	if ( $rows == 1 ) {

		# Commit will occur at end if no errors.
		print "Inserted 1 row in to policies (policy = $pname).\n" if ($debug);
	}
	elsif ( $rows == 0 ) {
		$dbh->rollback;
		$dbh->disconnect;
		die
"Error: Attempted to insert 0 rows in to policies (policy = $pname).\n";
	}
	else {
		$dbh->rollback;
		$dbh->disconnect;
		die
"Error: Attempted to insert $rows rows in to policies (policy = $pname).\n";
	}

	$xpc->setContextNode($policy);

	# Read signature section
	my $sig       = $xpc->find('Signatures')->get_node(1);
	my $resign    = duration2sec( $sig->find('Resign')->string_value() );
	my $refresh   = duration2sec( $sig->find('Refresh')->string_value() );
	my $jitter    = duration2sec( $sig->find('Jitter')->string_value() );
	my $clockskew = duration2sec( $sig->find('InceptionOffset')->string_value() );
	my $valdefault =
	  duration2sec( $sig->find('Validity/Default')->string_value() );
	my $valdenial =
	  duration2sec( $sig->find('Validity/Denial')->string_value() );
	insertpp( "resign",     $resign,     "signature", $pname );
	insertpp( "refresh",    $refresh,    "signature", $pname );
	insertpp( "jitter",     $jitter,     "signature", $pname );
	insertpp( "clockskew",  $clockskew,  "signature", $pname );
	insertpp( "valdefault", $valdefault, "signature", $pname );
	insertpp( "valdenial",  $valdenial,  "signature", $pname );

	# Read denial section
	my $denial = $xpc->find('Denial')->get_node(1);
#	$ttl = duration2sec( $denial->find('ttl')->string_value() );
#	insertpp( "ttl", $ttl, "denial", $pname );

	my $nsec3 = $denial->find('NSEC3')->get_node(1);
	if ($nsec3) {
		insertpp( "version", 3, "denial", $pname );
		my $optout = 0;
		$optout = 1 if ( $nsec3->find('OptOut')->get_node(1) );
		my $resalt     = duration2sec( $nsec3->find('Resalt')->string_value() );
		my $hash       = $nsec3->find('Hash')->get_node(1);
		my $algorithm  = $hash->find('Algorithm')->string_value();
		my $iterations = $hash->find('Iterations')->string_value();
		my $salt       = $hash->find('Salt')->get_node(1);
		my $saltlen    = $salt->find("\@length")->string_value();
		insertpp( "optout",     $optout,     "denial", $pname );
		insertpp( "resalt",     $resalt,     "denial", $pname );
		insertpp( "algorithm",  $algorithm,  "denial", $pname );
		insertpp( "iterations", $iterations, "denial", $pname );
		insertpp( "saltlength", $saltlen,    "denial", $pname );
	}

	# Read keys section
	my $keys = $xpc->find('Keys')->get_node(1);
	my $ttl = duration2sec( $keys->find('TTL')->string_value() );
	my $retiresafety =
	  duration2sec( $keys->find('RetireSafety')->string_value() );
	my $publishsafety =
	  duration2sec( $keys->find('PublishSafety')->string_value() );
	insertpp( "ttl",           $ttl,           "keys", $pname );
	insertpp( "retiresafety",  $retiresafety,  "keys", $pname );
	insertpp( "publishsafety", $publishsafety, "keys", $pname );

	my $ksk            = $keys->find('KSK')->get_node(1);
	my $algorithm      = $ksk->find('Algorithm')->string_value();
	my $algorithm_len  = $ksk->find("Algorithm/\@length")->string_value();
	my $lifetime       = duration2sec( $ksk->find('Lifetime')->string_value() );
	my $emergency      = $ksk->find('Emergency')->string_value();
	my $repository     = $ksk->find('Repository')->string_value();
	my $repository_id = getresid($repository);
	my $rfc5011        = 0;
	$rfc5011 = 1 if ( $ksk->find('RFC5011')->get_node(1) );
	insertpp( "algorithm",  $algorithm,     "ksk", $pname );
	insertpp( "bits",       $algorithm_len, "ksk", $pname );
	insertpp( "lifetime",   $lifetime,      "ksk", $pname );
	insertpp( "emergency",  $emergency,     "ksk", $pname );
	insertpp( "repository", $repository_id,  "ksk", $pname );
	insertpp( "rfc5011",    $rfc5011,       "ksk", $pname );

	my $zsk = $keys->find('ZSK')->get_node(1);
	$algorithm      = $zsk->find('Algorithm')->string_value();
	$algorithm_len  = $zsk->find("Algorithm/\@length")->string_value();
	$lifetime       = duration2sec( $ksk->find('Lifetime')->string_value() );
	$emergency      = $zsk->find('Emergency')->string_value();
	$repository     = $zsk->find('Repository')->string_value();
	$repository_id = getresid($repository);
	insertpp( "algorithm",  $algorithm,     "zsk", $pname );
	insertpp( "bits",       $algorithm_len, "zsk", $pname );
	insertpp( "lifetime",   $lifetime,      "zsk", $pname );
	insertpp( "emergency",  $emergency,     "zsk", $pname );
	insertpp( "repository", $repository_id,    "zsk", $pname );

	# Read zone section
	my $zone = $xpc->find('Zone')->get_node(1);
	my $pd   = duration2sec( $zone->find('PropagationDelay')->string_value() );
	my $soa  = $zone->find('SOA')->get_node(1);
	$ttl = duration2sec( $soa->find('TTL')->string_value() );
	my $min = duration2sec( $soa->find('Minimum')->string_value() );
	insertpp( "propagationdelay", $pd,  "zone", $pname );
	insertpp( "ttl",              $ttl, "zone", $pname );
	insertpp( "min",              $min, "zone", $pname );
	my $serial    = $soa->find('Serial')->string_value();
	my $serial_id = getserialid($serial);
	insertpp( "serial", $serial_id, "zone", $pname );

	# Read parent section
	my $parent = $xpc->find('Parent')->get_node(1);
	my $ttlDS  = duration2sec( $parent->find('DS/TTL')->string_value() );
	$pd  = duration2sec( $parent->find('PropagationDelay')->string_value() );
	$soa = $parent->find('SOA')->get_node(1);
	$ttl = duration2sec( $soa->find('TTL')->string_value() );
	$min = duration2sec( $soa->find('Minimum')->string_value() );
	insertpp( "propagationdelay", $pd,    "parent", $pname );
	insertpp( "ttl",              $ttl,   "parent", $pname );
	insertpp( "ttlds",            $ttlDS, "parent", $pname );
	insertpp( "min",              $min,   "parent", $pname );

}

#Now read from zone list
# Read doc
my $parser1 = XML::LibXML->new();
my $doc1    = $parser1->parse_file($zonelistxml);

# Validate
my $rngschema1 = XML::LibXML::RelaxNG->new( location => $zonelistrng );

# This will exit if validation fails and print errors
eval { $rngschema1->validate($doc1); };

# Read the XML using XPATH
my $xpc1 = XML::LibXML::XPathContext->new($doc1);

my $zonelist = $xpc1->find('ZoneList')->get_node(1);

#Now import zone data
my $zones = $zonelist->findnodes('Zone');
foreach my $zone ( $zones->get_nodelist() ) {
	my $zname   = $zone->find("\@name")->string_value();
	my $zpolicy = $zone->find("Policy")->string_value();
	insertz( $zname, $zpolicy);
}

# If we get here then the policies and zones imported OK
$dbh->commit;

$dbh->disconnect;
exit 0;

# SUBS
sub insertrepo {
  my $rname = $_[0];
	my $rcapacity = $_[1];
	my $rows    = $dbh->do(
		"insert into securitymodules (name, capacity) VALUES (?,?)", undef, $rname, $rcapacity) or die $dbh->errstr;
  	if ( $rows == 1 ) {

  		# Commit will occur at end if no errors.
  		print
  "Inserted 1 row in to securitymodules (repository name = $rname, capacity = $rcapacity).\n"
  		  if ($debug);
  	}
  	elsif ( $rows == 0 ) {
  		$dbh->rollback;
  		$dbh->disconnect;
  		die
  "Error: Failed to insert rows in to securitymodules (repository name = $rname, capacity = $rcapacity).\n"
  	}
  	else {
  		$dbh->rollback;
  		$dbh->disconnect;
  		die
  "Error: Attempted to insert $rows rows in to securitymodules (repository name = $rname, capacity = $rcapacity).\n"
  	}
}


sub insertz {
	my $zname   = $_[0];
	my $zpolicy = $_[1];
	my $rows    = $dbh->do(
		"insert into zones (name, policy_id)
	             select ?, p.id from policies p
	             where p.name=?",
		undef, $zname, $zpolicy
	) or die $dbh->errstr;
	if ( $rows == 1 ) {

		# Commit will occur at end if no errors.
		print
"Inserted 1 row in to zones (zone = $zname, policy = $zpolicy).\n"
		  if ($debug);
	}
	elsif ( $rows == 0 ) {
		$dbh->rollback;
		$dbh->disconnect;
		die
"Error: Failed to insert rows in to zones (zone = $zname, policy = $zpolicy).\n";
	}
	else {
		$dbh->rollback;
		$dbh->disconnect;
		die
"Error: Attempted to insert $rows rows in to zones (zone = $zname, policy = $zpolicy).\n";
	}

}

sub duration2sec {
	my $dfdx = DateTime::Format::Duration::XSD->new();
	print "Converting $_[0] to seconds...\n" if $debug;
	my $d = $dfdx->parse_duration( $_[0] );

	print(
"Warning: Converting months and/or years to seconds - you might get something you didn't intend.\n"
	) if ( $d->years != 0 || $d->months != 0 );

	my $sec =
	  ( $d->years * 365 * 86400 ) +
	  ( $d->months * 28 * 24 * 60 * 60 ) +
	  ( $d->weeks * 7 * 24 * 60 * 60 ) +
	  ( $d->days * 24 * 60 * 60 ) +
	  ( $d->hours * 60 * 60 ) +
	  ( $d->minutes * 60 ) +
	  ( $d->seconds );

	return $sec;
}

sub insertpp {
	my $parameter = $_[0];
	my $value     = $_[1];
	my $category  = $_[2];
	my $policy    = $_[3];
	my $rows      = $dbh->do(
		"insert into parameters_policies (parameter_id, policy_id, value)
             select p.id, x.id, ? from parameters p, policies x, categories c
             where p.name=? and c.name=? and c.id=p.category_id and x.name=?",
		undef, $value, $parameter, $category, $policy
	) or die $dbh->errstr;
	if ( $rows == 1 ) {

		# Commit will occur at end if no errors.
		print
"Inserted 1 row in to paramters_policies ($parameter = $value, category = $category, policy = $policy).\n"
		  if ($debug);
	}
	elsif ( $rows == 0 ) {
		$dbh->rollback;
		$dbh->disconnect;
		die
"Error: Failed to insert rows in to paramters_policies ($parameter = $value, category = $category, policy = $policy).\n";
	}
	else {
		$dbh->rollback;
		$dbh->disconnect;
		die
"Error: Attempted to insert $rows rows in to paramters_policies ($parameter = $value, category = $category, policy = $policy).\n";
	}

}

sub getresid {
	my $resname = $_[0];
	print "Looking up security module called $resname.\n" if $debug;
	my $resid =
	  $dbh->selectrow_array( "SELECT id FROM securitymodules WHERE name = ?",
		undef, $resname );
	if ( !defined $resid ) {
		$dbh->rollback;
		$dbh->disconnect;
		die "Error finding security module $resname.\n";
	}
	print "resid: $resid\n" if $debug;
	return $resid;
}

sub getserialid {
	my $serialname = $_[0];
	print "Looking up serial mode called $serialname.\n" if $debug;
	my $serialid =
	  $dbh->selectrow_array( "SELECT id FROM serialmodes WHERE name = ?",
		undef, $serialname );
	if ( !defined $serialid ) {
		$dbh->rollback;
		$dbh->disconnect;
		die "Error finding serial mode $serialname.\n";
	}
	print "serialid: $serialid\n" if $debug;
	return $serialid;
}

