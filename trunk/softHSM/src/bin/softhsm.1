./" $Id$

.TH softhsm 1 "18 December 2009"

.SH NAME
softhsm \- support tool for libsofthsm

.SH SYNOPSIS

.B softhsm --show-slots
.br
.B softhsm --init-token
\fB--slot \fInumber\fR \fB--label \fItext\fR [\fB--so-pin \fIPIN\fR \fB--pin \fIPIN\fR]
.br
.B softhsm --import \fIpath\fR
[\fB--file-pin \fIPIN\fR] \fB--slot \fInumber\fR \fB--pin \fIPIN\fR \fB--label \fItext\fR \fB--id \fIhex\fR
.br
.B softhsm --export \fIpath\fR
[\fB--file-pin \fIPIN\fR] \fB--slot \fInumber\fR \fB--pin \fIPIN\fR \fB--id \fIhex\fR

.SH DESCRIPTION

\fBsofthsm\fR is a support tool for libsofthsm. Read the sections below to get more information on 
the libsofthsm and PKCS#11.

Most applications assumes that the token they want to use is already initialized. It is then up to the user
to initialize the PKCS#11 token. This is done by using the PKCS#11 interface, but instead of writing your own
tool you can use the \fBsofthsm\fR tool.

Keys are usually created directly in the token, but the user may want to use an existing key pair.
Keys can be imported to a token by using the PKCS#11 interface, but this tool can also be used if the
user has the key pair in a PKCS#8 file. Use the \fBsofthsm-keyconv\fR tool if you want to convert keys from
BIND .private-key format over to PKCS#8.

A key may not always be exportable through the PKCS#11 interface, but the export command can
pull the key data directly from the token database.

.SH LIBSOFTHSM

libsofthsm, known as SoftHSM, provides cryptographic functionality by using the PKCS#11 API. 
It was developed as a part of the OpenDNSSEC project, thus designed to meet the requirements 
of OpenDNSSEC, but can also work together with other software that want to use the functionality
of PKCS#11.

SoftHSM is a software implementation of a generic cryptographic device with a PKCS#11 interface.
These devices are often called tokens. Read in the manual softhsm.conf(5) on how to create these 
tokens and how they are added to a slot in SoftHSM.

.SH PKCS#11

PKCS#11 can be used to handle and store cryptographic keys. This interface 
specifies how to communicate with cryptographic devices such as HSM:s 
(Hardware Security Modules) and smart cards. The purpose of these devices 
is, among others, to generate cryptographic keys and sign information without 
revealing private-key material to the outside world. They are often designed 
to perform well on these specific tasks compared to ordinary processes in a normal computer.

.SH CONFIGURATION FILE

The configuration file handles the slots and the tokens. Read in softhsm.conf(5) for more information.

.SH OPTIONS

.TP
.TP
\fB--show-slots\fR
Display all the available slots and their current status.

.TP
\fB--init-token\fR
Initialize the token at a given slot. If the token is already initialized then this command
will reinitialize it, thus erasing all the objects in the token. The matching SO PIN must also
be provided when doing reinitialization.
.br
Use with \fB--slot\fR, \fB--label\fR, \fB--so-pin\fR, and \fB--pin\fR.

.TP
\fB--import \fIpath\fR
Import a key pair from the given \fIpath\fR. The file must be in PKCS#8-format.
.br
Use with \fB--file-pin\fR, \fB--slot\fR, \fB--pin\fR, \fB--label\fR, and \fB--id\fR.

.TP
\fB--export \fIpath\fR
Export a key pair to the given \fIpath\fR. The file will be written in PKCS#8-format.
.br
Use with \fB--file-pin\fR, \fB--slot\fR, \fB--pin\fR, and \fB--id\fR.

.TP
\fB--file-pin \fIPIN\fR
The \fIPIN\fR will be used to encrypt or decrypt the PKCS#8 file depending if we are writing or reading.
If not given then the PKCS#8 file is assumed to be unencrypted.

.TP
\fB--force\fR
Use this option to override the warnings and force the given action.

.TP
\fB--help, -h\fR
Show the help screen.

.TP
\fB--id \fIhex\fR
Choose an ID of the key pair. The ID is in hexadecimal with a variable length.
Use with \fB--force\fR when importing a key pair if the ID already exists.

.TP
\fB--label \fItext\fR
Defines the \fIlabel\fR of the object or the token.

.TP
\fB--pin \fIPIN\fR
The \fIPIN\fR for the normal user.

.TP
\fB--slot \fInumber\fR
The slot where the token is located.

.TP
\fB--so-pin \fIPIN\fR
The \fIPIN\fR for the Security Officer (SO).

.SH EXAMPLES

The token can be initialized using this command:

    softhsm --init-token --slot 1 --label "A token"

A key pair can be imported using the softhsm tool where you specify the path 
to the key file, slot number, label and ID of the new objects, and the
user PIN. The file must be in PKCS#8 format.

    softhsm --import key1.pem --slot 1 --label "My key" --id A1B2 --pin 123456
    (Add, --file-pin \fIPIN\fR, if the key file is encrypted.)

All keys can be exported from the token database by using the softhsm
tool. The file will be exported in PKCS#8 format.

    softhsm --export key2.pem --slot 1 --id A1B2 --pin 123456
    (Add, --file-pin \fIPIN\fR, if you want to output an encrypted file.)

.SH BACKUP

A token can be backed up by issuing the command:

    sqlite3 <PATH TO TOKEN> .dump | sqlite3 copy.db

Copy the "copy.db" to a secure location. To restore the token, just copy
the file back to the system and add it to a slot in the file softhsm.conf.

.SH AUTHOR

Written by Rickard Bellgrim.

.SH REPORTING BUGS

Report bugs on <www.opendnssec.org>. 

.SH "SEE ALSO"
softhsm-keyconv(1), softhsm.conf(5)
