$Id$

This code should work but is not fully tested

Introduction
------------
libksm (Key and Signature Manager) is an interface for programs that need access to the KASP database. It contains the logic for creating keys, allocating keys, calculating key rollover times etc.

Pre-requisites
--------------
1) Install MySQL or sqlite3 (and sqlite3-dev) (sqlite has had more testing for the alpha release, but both should work)
    If you are using MySQL then an empty schema needs to be created, plus a 
    user with full access to that schema (assuming that you don't want to use 
    the root account).

2) Install libxml2
(http://xmlsoft.org/)

3) If you wish to run the unit tests, install "CUnit"
(http://cunit.sourceforge.net).

Building the Software
---------------------

The following options can be passed to configure;

--prefix=<dir>      Installation directory. All files will be installed
                    relative to this path.

Sqlite3 is the default DB if neither or both are specified.
--with-sqlite3=<dir>  Look for sqlite3 in this dir (/usr/local/ is assumed if no <dir> is specified)
--with-mysql=<dir>  Path to your MySQL instalation; this also selects MySQL
                    as your database

The following must be specified for make check to run the unit tests
--with-cunit=<dir>  Path to your CUNIT installation
--with-dbname=      Name of test DB schema
--with-dbhost=      Machine where test DB is hosted
--with-dbpass=      Password for test DB access
--with-dbuser=      Username for test DB access

Unit tests
----------
Unit tests can be run using make check. 

At present one assert fails (as a reminder that we need more tests in that section).


Database Schemas
----------------
The unit tests will setup the database according to the options given to configure. To manually setup the schema then run one of:

utils/database_create.mysql
or
utils/database_create.sqlite3

ksmutil
-------
This is a utility that allows several different actions to be performed (relatively) easily:

ksmutil [-f config_dir] setup [path_to_kasp.xml]
    Import conf.xml (from config_dir) into a database (deletes current contents)

ksmutil [-f config_dir] update [path_to_kasp.xml]
    Update database from config_dir (like above, but existing contents are kept)

ksmutil [-f config_dir] addzone zone [policy] [path_to_signerconf.xml] [input] [output]
    Add a zone to the config_dir and database
    zone == zone name
    policy == name of policy for zone to be put on
    path_to_signerconf.xml == Signerconf entry in zonelist
    input == Input entry in zonelist
    output == Output entry in zonelist

    If left blank then defaults will be provided for the latter 4 options.
    A backup of the sqlite DB file is made (if appropriate).

ksmutil [-f config_dir] delzone zone
    Delete a zone from the config_dir and database
    A backup of the sqlite DB file is made (if appropriate).

ksmutil [-f config_dir] listzone
    List zones from the zonelist.xml in config_dir

ksmutil export [policy]
export all policies [or named policy] to xml (in kasp.xml format)

ksmutil [-f config_dir] rollzone zone [KSK|ZSK]
    Rollover a zone (may roll all zones on that policy)
    the final option specifies the type of key to roll (both are rolled if nothing is specified)
    after running the rollover the communicator will be woken up so that the signer can be sent the new information

    If the policy that the zone is on specifies that keys are shared then all zones on that policy will be rolled.
    A backup of the sqlite DB file is made (if appropriate).

ksmutil [-f config_dir] rollpolicy policy [KSK|ZSK]
    Rollover all zones on a policy
    the final option specifies the type of key to roll (both are rolled if nothing is specified)
    after running the rollover the communicator will be woken up so that the signer can be sent the new information
    A backup of the sqlite DB file is made (if appropriate).

    
